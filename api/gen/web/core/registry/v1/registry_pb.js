// source: core/registry/v1/registry.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var core_aggregates_v1_registry_pb = require('../../../core/aggregates/v1/registry_pb.js');
goog.object.extend(proto, core_aggregates_v1_registry_pb);
goog.exportSymbol('proto.core.registry.v1.ConnectionRequest', null, global);
goog.exportSymbol('proto.core.registry.v1.ConnectionResponse', null, global);
goog.exportSymbol('proto.core.registry.v1.ConsumerRequest', null, global);
goog.exportSymbol('proto.core.registry.v1.ConsumerResponse', null, global);
goog.exportSymbol('proto.core.registry.v1.ProtocolRequest', null, global);
goog.exportSymbol('proto.core.registry.v1.ProtocolResponse', null, global);
goog.exportSymbol('proto.core.registry.v1.RegisterRequest', null, global);
goog.exportSymbol('proto.core.registry.v1.RegisterResponse', null, global);
goog.exportSymbol('proto.core.registry.v1.ServiceStatus', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.core.registry.v1.RegisterRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.core.registry.v1.RegisterRequest.repeatedFields_, null);
};
goog.inherits(proto.core.registry.v1.RegisterRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.core.registry.v1.RegisterRequest.displayName = 'proto.core.registry.v1.RegisterRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.core.registry.v1.ProtocolRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.core.registry.v1.ProtocolRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.core.registry.v1.ProtocolRequest.displayName = 'proto.core.registry.v1.ProtocolRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.core.registry.v1.ConsumerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.core.registry.v1.ConsumerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.core.registry.v1.ConsumerRequest.displayName = 'proto.core.registry.v1.ConsumerRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.core.registry.v1.RegisterResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.core.registry.v1.RegisterResponse.repeatedFields_, null);
};
goog.inherits(proto.core.registry.v1.RegisterResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.core.registry.v1.RegisterResponse.displayName = 'proto.core.registry.v1.RegisterResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.core.registry.v1.ProtocolResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.core.registry.v1.ProtocolResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.core.registry.v1.ProtocolResponse.displayName = 'proto.core.registry.v1.ProtocolResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.core.registry.v1.ConsumerResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.core.registry.v1.ConsumerResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.core.registry.v1.ConsumerResponse.displayName = 'proto.core.registry.v1.ConsumerResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.core.registry.v1.ConnectionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.core.registry.v1.ConnectionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.core.registry.v1.ConnectionRequest.displayName = 'proto.core.registry.v1.ConnectionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.core.registry.v1.ConnectionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.core.registry.v1.ConnectionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.core.registry.v1.ConnectionResponse.displayName = 'proto.core.registry.v1.ConnectionResponse';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.core.registry.v1.RegisterRequest.repeatedFields_ = [5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.core.registry.v1.RegisterRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.core.registry.v1.RegisterRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.core.registry.v1.RegisterRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core.registry.v1.RegisterRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    domain: jspb.Message.getFieldWithDefault(msg, 2, ""),
    version: jspb.Message.getFieldWithDefault(msg, 3, ""),
    description: jspb.Message.getFieldWithDefault(msg, 4, ""),
    protocolsList: jspb.Message.toObjectList(msg.getProtocolsList(),
    proto.core.registry.v1.ProtocolRequest.toObject, includeInstance),
    consumersList: jspb.Message.toObjectList(msg.getConsumersList(),
    proto.core.registry.v1.ConsumerRequest.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.core.registry.v1.RegisterRequest}
 */
proto.core.registry.v1.RegisterRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.core.registry.v1.RegisterRequest;
  return proto.core.registry.v1.RegisterRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.core.registry.v1.RegisterRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.core.registry.v1.RegisterRequest}
 */
proto.core.registry.v1.RegisterRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDomain(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 5:
      var value = new proto.core.registry.v1.ProtocolRequest;
      reader.readMessage(value,proto.core.registry.v1.ProtocolRequest.deserializeBinaryFromReader);
      msg.addProtocols(value);
      break;
    case 6:
      var value = new proto.core.registry.v1.ConsumerRequest;
      reader.readMessage(value,proto.core.registry.v1.ConsumerRequest.deserializeBinaryFromReader);
      msg.addConsumers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.core.registry.v1.RegisterRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.core.registry.v1.RegisterRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.core.registry.v1.RegisterRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core.registry.v1.RegisterRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDomain();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getProtocolsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.core.registry.v1.ProtocolRequest.serializeBinaryToWriter
    );
  }
  f = message.getConsumersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.core.registry.v1.ConsumerRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.core.registry.v1.RegisterRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.core.registry.v1.RegisterRequest} returns this
 */
proto.core.registry.v1.RegisterRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string domain = 2;
 * @return {string}
 */
proto.core.registry.v1.RegisterRequest.prototype.getDomain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.core.registry.v1.RegisterRequest} returns this
 */
proto.core.registry.v1.RegisterRequest.prototype.setDomain = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string version = 3;
 * @return {string}
 */
proto.core.registry.v1.RegisterRequest.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.core.registry.v1.RegisterRequest} returns this
 */
proto.core.registry.v1.RegisterRequest.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string description = 4;
 * @return {string}
 */
proto.core.registry.v1.RegisterRequest.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.core.registry.v1.RegisterRequest} returns this
 */
proto.core.registry.v1.RegisterRequest.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated ProtocolRequest protocols = 5;
 * @return {!Array<!proto.core.registry.v1.ProtocolRequest>}
 */
proto.core.registry.v1.RegisterRequest.prototype.getProtocolsList = function() {
  return /** @type{!Array<!proto.core.registry.v1.ProtocolRequest>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.core.registry.v1.ProtocolRequest, 5));
};


/**
 * @param {!Array<!proto.core.registry.v1.ProtocolRequest>} value
 * @return {!proto.core.registry.v1.RegisterRequest} returns this
*/
proto.core.registry.v1.RegisterRequest.prototype.setProtocolsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.core.registry.v1.ProtocolRequest=} opt_value
 * @param {number=} opt_index
 * @return {!proto.core.registry.v1.ProtocolRequest}
 */
proto.core.registry.v1.RegisterRequest.prototype.addProtocols = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.core.registry.v1.ProtocolRequest, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.core.registry.v1.RegisterRequest} returns this
 */
proto.core.registry.v1.RegisterRequest.prototype.clearProtocolsList = function() {
  return this.setProtocolsList([]);
};


/**
 * repeated ConsumerRequest consumers = 6;
 * @return {!Array<!proto.core.registry.v1.ConsumerRequest>}
 */
proto.core.registry.v1.RegisterRequest.prototype.getConsumersList = function() {
  return /** @type{!Array<!proto.core.registry.v1.ConsumerRequest>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.core.registry.v1.ConsumerRequest, 6));
};


/**
 * @param {!Array<!proto.core.registry.v1.ConsumerRequest>} value
 * @return {!proto.core.registry.v1.RegisterRequest} returns this
*/
proto.core.registry.v1.RegisterRequest.prototype.setConsumersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.core.registry.v1.ConsumerRequest=} opt_value
 * @param {number=} opt_index
 * @return {!proto.core.registry.v1.ConsumerRequest}
 */
proto.core.registry.v1.RegisterRequest.prototype.addConsumers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.core.registry.v1.ConsumerRequest, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.core.registry.v1.RegisterRequest} returns this
 */
proto.core.registry.v1.RegisterRequest.prototype.clearConsumersList = function() {
  return this.setConsumersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.core.registry.v1.ProtocolRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.core.registry.v1.ProtocolRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.core.registry.v1.ProtocolRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core.registry.v1.ProtocolRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    order: jspb.Message.getFieldWithDefault(msg, 1, 0),
    kind: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.core.registry.v1.ProtocolRequest}
 */
proto.core.registry.v1.ProtocolRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.core.registry.v1.ProtocolRequest;
  return proto.core.registry.v1.ProtocolRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.core.registry.v1.ProtocolRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.core.registry.v1.ProtocolRequest}
 */
proto.core.registry.v1.ProtocolRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOrder(value);
      break;
    case 2:
      var value = /** @type {!proto.core.aggregates.v1.ProtocolKind} */ (reader.readEnum());
      msg.setKind(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.core.registry.v1.ProtocolRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.core.registry.v1.ProtocolRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.core.registry.v1.ProtocolRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core.registry.v1.ProtocolRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrder();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getKind();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional int32 order = 1;
 * @return {number}
 */
proto.core.registry.v1.ProtocolRequest.prototype.getOrder = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.core.registry.v1.ProtocolRequest} returns this
 */
proto.core.registry.v1.ProtocolRequest.prototype.setOrder = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional core.aggregates.v1.ProtocolKind kind = 2;
 * @return {!proto.core.aggregates.v1.ProtocolKind}
 */
proto.core.registry.v1.ProtocolRequest.prototype.getKind = function() {
  return /** @type {!proto.core.aggregates.v1.ProtocolKind} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.core.aggregates.v1.ProtocolKind} value
 * @return {!proto.core.registry.v1.ProtocolRequest} returns this
 */
proto.core.registry.v1.ProtocolRequest.prototype.setKind = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.core.registry.v1.ConsumerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.core.registry.v1.ConsumerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.core.registry.v1.ConsumerRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core.registry.v1.ConsumerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    order: jspb.Message.getFieldWithDefault(msg, 1, 0),
    kind: jspb.Message.getFieldWithDefault(msg, 2, 0),
    aggregateType: jspb.Message.getFieldWithDefault(msg, 3, ""),
    eventType: jspb.Message.getFieldWithDefault(msg, 4, ""),
    eventCode: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.core.registry.v1.ConsumerRequest}
 */
proto.core.registry.v1.ConsumerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.core.registry.v1.ConsumerRequest;
  return proto.core.registry.v1.ConsumerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.core.registry.v1.ConsumerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.core.registry.v1.ConsumerRequest}
 */
proto.core.registry.v1.ConsumerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOrder(value);
      break;
    case 2:
      var value = /** @type {!proto.core.aggregates.v1.ConsumerKind} */ (reader.readEnum());
      msg.setKind(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAggregateType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventType(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.core.registry.v1.ConsumerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.core.registry.v1.ConsumerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.core.registry.v1.ConsumerRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core.registry.v1.ConsumerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrder();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getKind();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getAggregateType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getEventType();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getEventCode();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional int32 order = 1;
 * @return {number}
 */
proto.core.registry.v1.ConsumerRequest.prototype.getOrder = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.core.registry.v1.ConsumerRequest} returns this
 */
proto.core.registry.v1.ConsumerRequest.prototype.setOrder = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional core.aggregates.v1.ConsumerKind kind = 2;
 * @return {!proto.core.aggregates.v1.ConsumerKind}
 */
proto.core.registry.v1.ConsumerRequest.prototype.getKind = function() {
  return /** @type {!proto.core.aggregates.v1.ConsumerKind} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.core.aggregates.v1.ConsumerKind} value
 * @return {!proto.core.registry.v1.ConsumerRequest} returns this
 */
proto.core.registry.v1.ConsumerRequest.prototype.setKind = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string aggregate_type = 3;
 * @return {string}
 */
proto.core.registry.v1.ConsumerRequest.prototype.getAggregateType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.core.registry.v1.ConsumerRequest} returns this
 */
proto.core.registry.v1.ConsumerRequest.prototype.setAggregateType = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string event_type = 4;
 * @return {string}
 */
proto.core.registry.v1.ConsumerRequest.prototype.getEventType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.core.registry.v1.ConsumerRequest} returns this
 */
proto.core.registry.v1.ConsumerRequest.prototype.setEventType = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string event_code = 5;
 * @return {string}
 */
proto.core.registry.v1.ConsumerRequest.prototype.getEventCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.core.registry.v1.ConsumerRequest} returns this
 */
proto.core.registry.v1.ConsumerRequest.prototype.setEventCode = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.core.registry.v1.RegisterResponse.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.core.registry.v1.RegisterResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.core.registry.v1.RegisterResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.core.registry.v1.RegisterResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core.registry.v1.RegisterResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    protocolsList: jspb.Message.toObjectList(msg.getProtocolsList(),
    proto.core.registry.v1.ProtocolResponse.toObject, includeInstance),
    consumersList: jspb.Message.toObjectList(msg.getConsumersList(),
    proto.core.registry.v1.ConsumerResponse.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.core.registry.v1.RegisterResponse}
 */
proto.core.registry.v1.RegisterResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.core.registry.v1.RegisterResponse;
  return proto.core.registry.v1.RegisterResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.core.registry.v1.RegisterResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.core.registry.v1.RegisterResponse}
 */
proto.core.registry.v1.RegisterResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.core.registry.v1.ProtocolResponse;
      reader.readMessage(value,proto.core.registry.v1.ProtocolResponse.deserializeBinaryFromReader);
      msg.addProtocols(value);
      break;
    case 2:
      var value = new proto.core.registry.v1.ConsumerResponse;
      reader.readMessage(value,proto.core.registry.v1.ConsumerResponse.deserializeBinaryFromReader);
      msg.addConsumers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.core.registry.v1.RegisterResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.core.registry.v1.RegisterResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.core.registry.v1.RegisterResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core.registry.v1.RegisterResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProtocolsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.core.registry.v1.ProtocolResponse.serializeBinaryToWriter
    );
  }
  f = message.getConsumersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.core.registry.v1.ConsumerResponse.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ProtocolResponse protocols = 1;
 * @return {!Array<!proto.core.registry.v1.ProtocolResponse>}
 */
proto.core.registry.v1.RegisterResponse.prototype.getProtocolsList = function() {
  return /** @type{!Array<!proto.core.registry.v1.ProtocolResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.core.registry.v1.ProtocolResponse, 1));
};


/**
 * @param {!Array<!proto.core.registry.v1.ProtocolResponse>} value
 * @return {!proto.core.registry.v1.RegisterResponse} returns this
*/
proto.core.registry.v1.RegisterResponse.prototype.setProtocolsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.core.registry.v1.ProtocolResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.core.registry.v1.ProtocolResponse}
 */
proto.core.registry.v1.RegisterResponse.prototype.addProtocols = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.core.registry.v1.ProtocolResponse, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.core.registry.v1.RegisterResponse} returns this
 */
proto.core.registry.v1.RegisterResponse.prototype.clearProtocolsList = function() {
  return this.setProtocolsList([]);
};


/**
 * repeated ConsumerResponse consumers = 2;
 * @return {!Array<!proto.core.registry.v1.ConsumerResponse>}
 */
proto.core.registry.v1.RegisterResponse.prototype.getConsumersList = function() {
  return /** @type{!Array<!proto.core.registry.v1.ConsumerResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.core.registry.v1.ConsumerResponse, 2));
};


/**
 * @param {!Array<!proto.core.registry.v1.ConsumerResponse>} value
 * @return {!proto.core.registry.v1.RegisterResponse} returns this
*/
proto.core.registry.v1.RegisterResponse.prototype.setConsumersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.core.registry.v1.ConsumerResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.core.registry.v1.ConsumerResponse}
 */
proto.core.registry.v1.RegisterResponse.prototype.addConsumers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.core.registry.v1.ConsumerResponse, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.core.registry.v1.RegisterResponse} returns this
 */
proto.core.registry.v1.RegisterResponse.prototype.clearConsumersList = function() {
  return this.setConsumersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.core.registry.v1.ProtocolResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.core.registry.v1.ProtocolResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.core.registry.v1.ProtocolResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core.registry.v1.ProtocolResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    order: jspb.Message.getFieldWithDefault(msg, 1, 0),
    kind: jspb.Message.getFieldWithDefault(msg, 2, 0),
    port: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.core.registry.v1.ProtocolResponse}
 */
proto.core.registry.v1.ProtocolResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.core.registry.v1.ProtocolResponse;
  return proto.core.registry.v1.ProtocolResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.core.registry.v1.ProtocolResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.core.registry.v1.ProtocolResponse}
 */
proto.core.registry.v1.ProtocolResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOrder(value);
      break;
    case 2:
      var value = /** @type {!proto.core.aggregates.v1.ProtocolKind} */ (reader.readEnum());
      msg.setKind(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.core.registry.v1.ProtocolResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.core.registry.v1.ProtocolResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.core.registry.v1.ProtocolResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core.registry.v1.ProtocolResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrder();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getKind();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 order = 1;
 * @return {number}
 */
proto.core.registry.v1.ProtocolResponse.prototype.getOrder = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.core.registry.v1.ProtocolResponse} returns this
 */
proto.core.registry.v1.ProtocolResponse.prototype.setOrder = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional core.aggregates.v1.ProtocolKind kind = 2;
 * @return {!proto.core.aggregates.v1.ProtocolKind}
 */
proto.core.registry.v1.ProtocolResponse.prototype.getKind = function() {
  return /** @type {!proto.core.aggregates.v1.ProtocolKind} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.core.aggregates.v1.ProtocolKind} value
 * @return {!proto.core.registry.v1.ProtocolResponse} returns this
 */
proto.core.registry.v1.ProtocolResponse.prototype.setKind = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional int32 port = 3;
 * @return {number}
 */
proto.core.registry.v1.ProtocolResponse.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.core.registry.v1.ProtocolResponse} returns this
 */
proto.core.registry.v1.ProtocolResponse.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.core.registry.v1.ConsumerResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.core.registry.v1.ConsumerResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.core.registry.v1.ConsumerResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core.registry.v1.ConsumerResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    order: jspb.Message.getFieldWithDefault(msg, 1, 0),
    kind: jspb.Message.getFieldWithDefault(msg, 2, 0),
    routingKey: jspb.Message.getFieldWithDefault(msg, 3, ""),
    exchange: jspb.Message.getFieldWithDefault(msg, 4, ""),
    queueName: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.core.registry.v1.ConsumerResponse}
 */
proto.core.registry.v1.ConsumerResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.core.registry.v1.ConsumerResponse;
  return proto.core.registry.v1.ConsumerResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.core.registry.v1.ConsumerResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.core.registry.v1.ConsumerResponse}
 */
proto.core.registry.v1.ConsumerResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOrder(value);
      break;
    case 2:
      var value = /** @type {!proto.core.aggregates.v1.ConsumerKind} */ (reader.readEnum());
      msg.setKind(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoutingKey(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setExchange(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setQueueName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.core.registry.v1.ConsumerResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.core.registry.v1.ConsumerResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.core.registry.v1.ConsumerResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core.registry.v1.ConsumerResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrder();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getKind();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getRoutingKey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getExchange();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getQueueName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional int32 order = 1;
 * @return {number}
 */
proto.core.registry.v1.ConsumerResponse.prototype.getOrder = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.core.registry.v1.ConsumerResponse} returns this
 */
proto.core.registry.v1.ConsumerResponse.prototype.setOrder = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional core.aggregates.v1.ConsumerKind kind = 2;
 * @return {!proto.core.aggregates.v1.ConsumerKind}
 */
proto.core.registry.v1.ConsumerResponse.prototype.getKind = function() {
  return /** @type {!proto.core.aggregates.v1.ConsumerKind} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.core.aggregates.v1.ConsumerKind} value
 * @return {!proto.core.registry.v1.ConsumerResponse} returns this
 */
proto.core.registry.v1.ConsumerResponse.prototype.setKind = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string routing_key = 3;
 * @return {string}
 */
proto.core.registry.v1.ConsumerResponse.prototype.getRoutingKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.core.registry.v1.ConsumerResponse} returns this
 */
proto.core.registry.v1.ConsumerResponse.prototype.setRoutingKey = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string exchange = 4;
 * @return {string}
 */
proto.core.registry.v1.ConsumerResponse.prototype.getExchange = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.core.registry.v1.ConsumerResponse} returns this
 */
proto.core.registry.v1.ConsumerResponse.prototype.setExchange = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string queue_name = 5;
 * @return {string}
 */
proto.core.registry.v1.ConsumerResponse.prototype.getQueueName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.core.registry.v1.ConsumerResponse} returns this
 */
proto.core.registry.v1.ConsumerResponse.prototype.setQueueName = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.core.registry.v1.ConnectionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.core.registry.v1.ConnectionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.core.registry.v1.ConnectionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core.registry.v1.ConnectionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    version: jspb.Message.getFieldWithDefault(msg, 2, ""),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.core.registry.v1.ConnectionRequest}
 */
proto.core.registry.v1.ConnectionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.core.registry.v1.ConnectionRequest;
  return proto.core.registry.v1.ConnectionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.core.registry.v1.ConnectionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.core.registry.v1.ConnectionRequest}
 */
proto.core.registry.v1.ConnectionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 3:
      var value = /** @type {!proto.core.aggregates.v1.ProtocolKind} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.core.registry.v1.ConnectionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.core.registry.v1.ConnectionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.core.registry.v1.ConnectionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core.registry.v1.ConnectionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.core.registry.v1.ConnectionRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.core.registry.v1.ConnectionRequest} returns this
 */
proto.core.registry.v1.ConnectionRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string version = 2;
 * @return {string}
 */
proto.core.registry.v1.ConnectionRequest.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.core.registry.v1.ConnectionRequest} returns this
 */
proto.core.registry.v1.ConnectionRequest.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional core.aggregates.v1.ProtocolKind type = 3;
 * @return {!proto.core.aggregates.v1.ProtocolKind}
 */
proto.core.registry.v1.ConnectionRequest.prototype.getType = function() {
  return /** @type {!proto.core.aggregates.v1.ProtocolKind} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.core.aggregates.v1.ProtocolKind} value
 * @return {!proto.core.registry.v1.ConnectionRequest} returns this
 */
proto.core.registry.v1.ConnectionRequest.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.core.registry.v1.ConnectionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.core.registry.v1.ConnectionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.core.registry.v1.ConnectionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core.registry.v1.ConnectionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    port: jspb.Message.getFieldWithDefault(msg, 2, 0),
    status: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.core.registry.v1.ConnectionResponse}
 */
proto.core.registry.v1.ConnectionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.core.registry.v1.ConnectionResponse;
  return proto.core.registry.v1.ConnectionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.core.registry.v1.ConnectionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.core.registry.v1.ConnectionResponse}
 */
proto.core.registry.v1.ConnectionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    case 3:
      var value = /** @type {!proto.core.registry.v1.ServiceStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.core.registry.v1.ConnectionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.core.registry.v1.ConnectionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.core.registry.v1.ConnectionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core.registry.v1.ConnectionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.core.registry.v1.ConnectionResponse.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.core.registry.v1.ConnectionResponse} returns this
 */
proto.core.registry.v1.ConnectionResponse.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 port = 2;
 * @return {number}
 */
proto.core.registry.v1.ConnectionResponse.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.core.registry.v1.ConnectionResponse} returns this
 */
proto.core.registry.v1.ConnectionResponse.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional ServiceStatus status = 3;
 * @return {!proto.core.registry.v1.ServiceStatus}
 */
proto.core.registry.v1.ConnectionResponse.prototype.getStatus = function() {
  return /** @type {!proto.core.registry.v1.ServiceStatus} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.core.registry.v1.ServiceStatus} value
 * @return {!proto.core.registry.v1.ConnectionResponse} returns this
 */
proto.core.registry.v1.ConnectionResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * @enum {number}
 */
proto.core.registry.v1.ServiceStatus = {
  SERVICE_STATUS_INVALID: 0,
  SERVICE_STATUS_HEALTHY: 1,
  SERVICE_STATUS_UNHEALTHY: 2
};

goog.object.extend(exports, proto.core.registry.v1);
