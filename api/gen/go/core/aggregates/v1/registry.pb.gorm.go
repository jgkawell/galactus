package v1

import (
	context "context"
)

type RegistrationORM struct {
	Address     string
	Consumers   []*ConsumerORM `gorm:"foreignkey:RegistrationId;association_foreignkey:Id"`
	Description string
	Domain      string         `gorm:"uniqueIndex:idx"`
	Id          string         `gorm:"type:uuid;primary_key"`
	Name        string         `gorm:"uniqueIndex:idx"`
	Protocols   []*ProtocolORM `gorm:"foreignkey:RegistrationId;association_foreignkey:Id"`
	Status      int32
	Version     string `gorm:"uniqueIndex:idx"`
}

// TableName overrides the default tablename generated by GORM
func (RegistrationORM) TableName() string {
	return "registrations"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Registration) ToORM(ctx context.Context) (RegistrationORM, error) {
	to := RegistrationORM{}
	var err error
	if prehook, ok := interface{}(m).(RegistrationWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Name = m.Name
	to.Version = m.Version
	to.Domain = m.Domain
	to.Description = m.Description
	to.Address = m.Address
	to.Status = int32(m.Status)
	for _, v := range m.Protocols {
		if v != nil {
			if tempProtocols, cErr := v.ToORM(ctx); cErr == nil {
				to.Protocols = append(to.Protocols, &tempProtocols)
			} else {
				return to, cErr
			}
		} else {
			to.Protocols = append(to.Protocols, nil)
		}
	}
	for _, v := range m.Consumers {
		if v != nil {
			if tempConsumers, cErr := v.ToORM(ctx); cErr == nil {
				to.Consumers = append(to.Consumers, &tempConsumers)
			} else {
				return to, cErr
			}
		} else {
			to.Consumers = append(to.Consumers, nil)
		}
	}
	if posthook, ok := interface{}(m).(RegistrationWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *RegistrationORM) ToPB(ctx context.Context) (Registration, error) {
	to := Registration{}
	var err error
	if prehook, ok := interface{}(m).(RegistrationWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Name = m.Name
	to.Version = m.Version
	to.Domain = m.Domain
	to.Description = m.Description
	to.Address = m.Address
	to.Status = ServiceStatus(m.Status)
	for _, v := range m.Protocols {
		if v != nil {
			if tempProtocols, cErr := v.ToPB(ctx); cErr == nil {
				to.Protocols = append(to.Protocols, &tempProtocols)
			} else {
				return to, cErr
			}
		} else {
			to.Protocols = append(to.Protocols, nil)
		}
	}
	for _, v := range m.Consumers {
		if v != nil {
			if tempConsumers, cErr := v.ToPB(ctx); cErr == nil {
				to.Consumers = append(to.Consumers, &tempConsumers)
			} else {
				return to, cErr
			}
		} else {
			to.Consumers = append(to.Consumers, nil)
		}
	}
	if posthook, ok := interface{}(m).(RegistrationWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Registration the arg will be the target, the caller the one being converted from

// RegistrationBeforeToORM called before default ToORM code
type RegistrationWithBeforeToORM interface {
	BeforeToORM(context.Context, *RegistrationORM) error
}

// RegistrationAfterToORM called after default ToORM code
type RegistrationWithAfterToORM interface {
	AfterToORM(context.Context, *RegistrationORM) error
}

// RegistrationBeforeToPB called before default ToPB code
type RegistrationWithBeforeToPB interface {
	BeforeToPB(context.Context, *Registration) error
}

// RegistrationAfterToPB called after default ToPB code
type RegistrationWithAfterToPB interface {
	AfterToPB(context.Context, *Registration) error
}

type ProtocolORM struct {
	Id             string `gorm:"type:uuid;primary_key"`
	Kind           int32
	Port           int32
	RegistrationId *string
	Route          string
	Version        string
}

// TableName overrides the default tablename generated by GORM
func (ProtocolORM) TableName() string {
	return "protocols"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Protocol) ToORM(ctx context.Context) (ProtocolORM, error) {
	to := ProtocolORM{}
	var err error
	if prehook, ok := interface{}(m).(ProtocolWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Kind = int32(m.Kind)
	to.Version = m.Version
	to.Port = m.Port
	to.Route = m.Route
	if posthook, ok := interface{}(m).(ProtocolWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *ProtocolORM) ToPB(ctx context.Context) (Protocol, error) {
	to := Protocol{}
	var err error
	if prehook, ok := interface{}(m).(ProtocolWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Kind = ProtocolKind(m.Kind)
	to.Version = m.Version
	to.Port = m.Port
	to.Route = m.Route
	if posthook, ok := interface{}(m).(ProtocolWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Protocol the arg will be the target, the caller the one being converted from

// ProtocolBeforeToORM called before default ToORM code
type ProtocolWithBeforeToORM interface {
	BeforeToORM(context.Context, *ProtocolORM) error
}

// ProtocolAfterToORM called after default ToORM code
type ProtocolWithAfterToORM interface {
	AfterToORM(context.Context, *ProtocolORM) error
}

// ProtocolBeforeToPB called before default ToPB code
type ProtocolWithBeforeToPB interface {
	BeforeToPB(context.Context, *Protocol) error
}

// ProtocolAfterToPB called after default ToPB code
type ProtocolWithAfterToPB interface {
	AfterToPB(context.Context, *Protocol) error
}

type ConsumerORM struct {
	Id             string `gorm:"type:uuid;primary_key"`
	Kind           int32
	RegistrationId *string
	RoutingKey     string
}

// TableName overrides the default tablename generated by GORM
func (ConsumerORM) TableName() string {
	return "consumers"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Consumer) ToORM(ctx context.Context) (ConsumerORM, error) {
	to := ConsumerORM{}
	var err error
	if prehook, ok := interface{}(m).(ConsumerWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.RoutingKey = m.RoutingKey
	to.Kind = int32(m.Kind)
	if posthook, ok := interface{}(m).(ConsumerWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *ConsumerORM) ToPB(ctx context.Context) (Consumer, error) {
	to := Consumer{}
	var err error
	if prehook, ok := interface{}(m).(ConsumerWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.RoutingKey = m.RoutingKey
	to.Kind = ConsumerKind(m.Kind)
	if posthook, ok := interface{}(m).(ConsumerWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Consumer the arg will be the target, the caller the one being converted from

// ConsumerBeforeToORM called before default ToORM code
type ConsumerWithBeforeToORM interface {
	BeforeToORM(context.Context, *ConsumerORM) error
}

// ConsumerAfterToORM called after default ToORM code
type ConsumerWithAfterToORM interface {
	AfterToORM(context.Context, *ConsumerORM) error
}

// ConsumerBeforeToPB called before default ToPB code
type ConsumerWithBeforeToPB interface {
	BeforeToPB(context.Context, *Consumer) error
}

// ConsumerAfterToPB called after default ToPB code
type ConsumerWithAfterToPB interface {
	AfterToPB(context.Context, *Consumer) error
}
