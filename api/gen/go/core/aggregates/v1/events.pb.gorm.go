package v1

import (
	context "context"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	time "time"
)

type EventORM struct {
	AggregateId   string
	AggregateType string
	EventCode     string
	EventData     string `gorm:"type:json"`
	EventType     string
	Id            string     `gorm:"type:uuid;primary_key"`
	PublishedTime *time.Time `gorm:"type:timestamp"`
	ReceivedTime  *time.Time `gorm:"type:timestamp"`
	TransactionId string
}

// TableName overrides the default tablename generated by GORM
func (EventORM) TableName() string {
	return "events"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Event) ToORM(ctx context.Context) (EventORM, error) {
	to := EventORM{}
	var err error
	if prehook, ok := interface{}(m).(EventWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	if m.ReceivedTime != nil {
		t := m.ReceivedTime.AsTime()
		to.ReceivedTime = &t
	}
	if m.PublishedTime != nil {
		t := m.PublishedTime.AsTime()
		to.PublishedTime = &t
	}
	to.TransactionId = m.TransactionId
	to.AggregateType = m.AggregateType
	to.EventType = m.EventType
	to.EventCode = m.EventCode
	to.AggregateId = m.AggregateId
	to.EventData = m.EventData
	if posthook, ok := interface{}(m).(EventWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *EventORM) ToPB(ctx context.Context) (Event, error) {
	to := Event{}
	var err error
	if prehook, ok := interface{}(m).(EventWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	if m.ReceivedTime != nil {
		to.ReceivedTime = timestamppb.New(*m.ReceivedTime)
	}
	if m.PublishedTime != nil {
		to.PublishedTime = timestamppb.New(*m.PublishedTime)
	}
	to.TransactionId = m.TransactionId
	to.AggregateType = m.AggregateType
	to.EventType = m.EventType
	to.EventCode = m.EventCode
	to.AggregateId = m.AggregateId
	to.EventData = m.EventData
	if posthook, ok := interface{}(m).(EventWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Event the arg will be the target, the caller the one being converted from

// EventBeforeToORM called before default ToORM code
type EventWithBeforeToORM interface {
	BeforeToORM(context.Context, *EventORM) error
}

// EventAfterToORM called after default ToORM code
type EventWithAfterToORM interface {
	AfterToORM(context.Context, *EventORM) error
}

// EventBeforeToPB called before default ToPB code
type EventWithBeforeToPB interface {
	BeforeToPB(context.Context, *Event) error
}

// EventAfterToPB called after default ToPB code
type EventWithAfterToPB interface {
	AfterToPB(context.Context, *Event) error
}
