// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: core/aggregates/v1/registry.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _registry_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Registration with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Registration) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Registration with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RegistrationMultiError, or
// nil if none found.
func (m *Registration) ValidateAll() error {
	return m.validate(true)
}

func (m *Registration) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = RegistrationValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 255 {
		err := RegistrationValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetVersion()); l < 1 || l > 255 {
		err := RegistrationValidationError{
			field:  "Version",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDescription()); l < 1 || l > 255 {
		err := RegistrationValidationError{
			field:  "Description",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetAddress()); l < 1 || l > 255 {
		err := RegistrationValidationError{
			field:  "Address",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := ServiceStatus_name[int32(m.GetStatus())]; !ok {
		err := RegistrationValidationError{
			field:  "Status",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetProtocols() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RegistrationValidationError{
						field:  fmt.Sprintf("Protocols[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RegistrationValidationError{
						field:  fmt.Sprintf("Protocols[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RegistrationValidationError{
					field:  fmt.Sprintf("Protocols[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetConsumers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RegistrationValidationError{
						field:  fmt.Sprintf("Consumers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RegistrationValidationError{
						field:  fmt.Sprintf("Consumers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RegistrationValidationError{
					field:  fmt.Sprintf("Consumers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RegistrationMultiError(errors)
	}

	return nil
}

func (m *Registration) _validateUuid(uuid string) error {
	if matched := _registry_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RegistrationMultiError is an error wrapping multiple validation errors
// returned by Registration.ValidateAll() if the designated constraints aren't met.
type RegistrationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegistrationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegistrationMultiError) AllErrors() []error { return m }

// RegistrationValidationError is the validation error returned by
// Registration.Validate if the designated constraints aren't met.
type RegistrationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegistrationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegistrationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegistrationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegistrationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegistrationValidationError) ErrorName() string { return "RegistrationValidationError" }

// Error satisfies the builtin error interface
func (e RegistrationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegistration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegistrationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegistrationValidationError{}

// Validate checks the field values on Protocol with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Protocol) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Protocol with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProtocolMultiError, or nil
// if none found.
func (m *Protocol) ValidateAll() error {
	return m.validate(true)
}

func (m *Protocol) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = ProtocolValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := ProtocolKind_name[int32(m.GetKind())]; !ok {
		err := ProtocolValidationError{
			field:  "Kind",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetVersion()); l < 1 || l > 255 {
		err := ProtocolValidationError{
			field:  "Version",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPort(); val <= 1 || val >= 65535 {
		err := ProtocolValidationError{
			field:  "Port",
			reason: "value must be inside range (1, 65535)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ProtocolMultiError(errors)
	}

	return nil
}

func (m *Protocol) _validateUuid(uuid string) error {
	if matched := _registry_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ProtocolMultiError is an error wrapping multiple validation errors returned
// by Protocol.ValidateAll() if the designated constraints aren't met.
type ProtocolMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProtocolMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProtocolMultiError) AllErrors() []error { return m }

// ProtocolValidationError is the validation error returned by
// Protocol.Validate if the designated constraints aren't met.
type ProtocolValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProtocolValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProtocolValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProtocolValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProtocolValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProtocolValidationError) ErrorName() string { return "ProtocolValidationError" }

// Error satisfies the builtin error interface
func (e ProtocolValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProtocol.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProtocolValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProtocolValidationError{}

// Validate checks the field values on Consumer with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Consumer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Consumer with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConsumerMultiError, or nil
// if none found.
func (m *Consumer) ValidateAll() error {
	return m.validate(true)
}

func (m *Consumer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = ConsumerValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetRoutingKey()); l < 1 || l > 255 {
		err := ConsumerValidationError{
			field:  "RoutingKey",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := ConsumerKind_name[int32(m.GetKind())]; !ok {
		err := ConsumerValidationError{
			field:  "Kind",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ConsumerMultiError(errors)
	}

	return nil
}

func (m *Consumer) _validateUuid(uuid string) error {
	if matched := _registry_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ConsumerMultiError is an error wrapping multiple validation errors returned
// by Consumer.ValidateAll() if the designated constraints aren't met.
type ConsumerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConsumerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConsumerMultiError) AllErrors() []error { return m }

// ConsumerValidationError is the validation error returned by
// Consumer.Validate if the designated constraints aren't met.
type ConsumerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConsumerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConsumerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConsumerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConsumerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConsumerValidationError) ErrorName() string { return "ConsumerValidationError" }

// Error satisfies the builtin error interface
func (e ConsumerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConsumer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConsumerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConsumerValidationError{}
