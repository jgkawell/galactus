package v1

import (
	context "context"
	fmt "fmt"
	gorm1 "github.com/infobloxopen/atlas-app-toolkit/gorm"
	errors "github.com/infobloxopen/protoc-gen-gorm/errors"
	gorm "github.com/jinzhu/gorm"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	strings "strings"
	time "time"
)

type EventORM struct {
	EventData     string     `gorm:"type:json"`
	EventSource   string     `gorm:"type:varchar(255)"`
	EventType     string     `gorm:"type:varchar(255)"`
	Id            string     `gorm:"type:uuid;primary_key"`
	PublishedTime *time.Time `gorm:"type:timestamp"`
	ReceivedTime  *time.Time `gorm:"type:timestamp"`
	TransactionId string     `gorm:"type:uuid"`
}

// TableName overrides the default tablename generated by GORM
func (EventORM) TableName() string {
	return "events"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Event) ToORM(ctx context.Context) (EventORM, error) {
	to := EventORM{}
	var err error
	if prehook, ok := interface{}(m).(EventWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	if m.ReceivedTime != nil {
		t := m.ReceivedTime.AsTime()
		to.ReceivedTime = &t
	}
	if m.PublishedTime != nil {
		t := m.PublishedTime.AsTime()
		to.PublishedTime = &t
	}
	to.TransactionId = m.TransactionId
	to.EventSource = m.EventSource
	to.EventType = m.EventType
	to.EventData = m.EventData
	if posthook, ok := interface{}(m).(EventWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *EventORM) ToPB(ctx context.Context) (Event, error) {
	to := Event{}
	var err error
	if prehook, ok := interface{}(m).(EventWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	if m.ReceivedTime != nil {
		to.ReceivedTime = timestamppb.New(*m.ReceivedTime)
	}
	if m.PublishedTime != nil {
		to.PublishedTime = timestamppb.New(*m.PublishedTime)
	}
	to.TransactionId = m.TransactionId
	to.EventSource = m.EventSource
	to.EventType = m.EventType
	to.EventData = m.EventData
	if posthook, ok := interface{}(m).(EventWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Event the arg will be the target, the caller the one being converted from

// EventBeforeToORM called before default ToORM code
type EventWithBeforeToORM interface {
	BeforeToORM(context.Context, *EventORM) error
}

// EventAfterToORM called after default ToORM code
type EventWithAfterToORM interface {
	AfterToORM(context.Context, *EventORM) error
}

// EventBeforeToPB called before default ToPB code
type EventWithBeforeToPB interface {
	BeforeToPB(context.Context, *Event) error
}

// EventAfterToPB called after default ToPB code
type EventWithAfterToPB interface {
	AfterToPB(context.Context, *Event) error
}

// DefaultCreateEvent executes a basic gorm create call
func DefaultCreateEvent(ctx context.Context, in *Event, db *gorm.DB) (*Event, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(EventORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(EventORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type EventORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type EventORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadEvent(ctx context.Context, in *Event, db *gorm.DB) (*Event, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(EventORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &EventORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(EventORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := EventORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(EventORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type EventORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type EventORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type EventORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteEvent(ctx context.Context, in *Event, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == "" {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(EventORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&EventORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(EventORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type EventORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type EventORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteEventSet(ctx context.Context, in []*Event, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []string{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == "" {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&EventORM{})).(EventORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&EventORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&EventORM{})).(EventORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type EventORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Event, *gorm.DB) (*gorm.DB, error)
}
type EventORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Event, *gorm.DB) error
}

// DefaultStrictUpdateEvent clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateEvent(ctx context.Context, in *Event, db *gorm.DB) (*Event, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateEvent")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &EventORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(EventORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(EventORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(EventORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type EventORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type EventORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type EventORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchEvent executes a basic gorm update call with patch behavior
func DefaultPatchEvent(ctx context.Context, in *Event, updateMask *field_mask.FieldMask, db *gorm.DB) (*Event, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Event
	var err error
	if hook, ok := interface{}(&pbObj).(EventWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadEvent(ctx, &Event{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(EventWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskEvent(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(EventWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateEvent(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(EventWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type EventWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Event, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type EventWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Event, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type EventWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Event, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type EventWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Event, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetEvent executes a bulk gorm update call with patch behavior
func DefaultPatchSetEvent(ctx context.Context, objects []*Event, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Event, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Event, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchEvent(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskEvent patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskEvent(ctx context.Context, patchee *Event, patcher *Event, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Event, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedReceivedTime bool
	var updatedPublishedTime bool
	for i, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if !updatedReceivedTime && strings.HasPrefix(f, prefix+"ReceivedTime.") {
			if patcher.ReceivedTime == nil {
				patchee.ReceivedTime = nil
				continue
			}
			if patchee.ReceivedTime == nil {
				patchee.ReceivedTime = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"ReceivedTime."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.ReceivedTime, patchee.ReceivedTime, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"ReceivedTime" {
			updatedReceivedTime = true
			patchee.ReceivedTime = patcher.ReceivedTime
			continue
		}
		if !updatedPublishedTime && strings.HasPrefix(f, prefix+"PublishedTime.") {
			if patcher.PublishedTime == nil {
				patchee.PublishedTime = nil
				continue
			}
			if patchee.PublishedTime == nil {
				patchee.PublishedTime = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"PublishedTime."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.PublishedTime, patchee.PublishedTime, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"PublishedTime" {
			updatedPublishedTime = true
			patchee.PublishedTime = patcher.PublishedTime
			continue
		}
		if f == prefix+"TransactionId" {
			patchee.TransactionId = patcher.TransactionId
			continue
		}
		if f == prefix+"EventSource" {
			patchee.EventSource = patcher.EventSource
			continue
		}
		if f == prefix+"EventType" {
			patchee.EventType = patcher.EventType
			continue
		}
		if f == prefix+"EventData" {
			patchee.EventData = patcher.EventData
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListEvent executes a gorm list call
func DefaultListEvent(ctx context.Context, db *gorm.DB) ([]*Event, error) {
	in := Event{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(EventORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &EventORM{}, &Event{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(EventORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []EventORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(EventORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Event{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type EventORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type EventORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type EventORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]EventORM) error
}
