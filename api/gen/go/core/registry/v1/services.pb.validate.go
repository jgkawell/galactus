// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: core/registry/v1/services.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _services_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on RegisterRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RegisterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterRequestMultiError, or nil if none found.
func (m *RegisterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Domain

	if !_RegisterRequest_Version_Pattern.MatchString(m.GetVersion()) {
		err := RegisterRequestValidationError{
			field:  "Version",
			reason: "value does not match regex pattern \"^v[0-9]+\\\\.[0-9]+\\\\.[0-9]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RegisterRequestMultiError(errors)
	}

	return nil
}

// RegisterRequestMultiError is an error wrapping multiple validation errors
// returned by RegisterRequest.ValidateAll() if the designated constraints
// aren't met.
type RegisterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterRequestMultiError) AllErrors() []error { return m }

// RegisterRequestValidationError is the validation error returned by
// RegisterRequest.Validate if the designated constraints aren't met.
type RegisterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterRequestValidationError) ErrorName() string { return "RegisterRequestValidationError" }

// Error satisfies the builtin error interface
func (e RegisterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterRequestValidationError{}

var _RegisterRequest_Version_Pattern = regexp.MustCompile("^v[0-9]+\\.[0-9]+\\.[0-9]+$")

// Validate checks the field values on RegisterResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RegisterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterResponseMultiError, or nil if none found.
func (m *RegisterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = RegisterResponseValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RegisterResponseMultiError(errors)
	}

	return nil
}

func (m *RegisterResponse) _validateUuid(uuid string) error {
	if matched := _services_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RegisterResponseMultiError is an error wrapping multiple validation errors
// returned by RegisterResponse.ValidateAll() if the designated constraints
// aren't met.
type RegisterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterResponseMultiError) AllErrors() []error { return m }

// RegisterResponseValidationError is the validation error returned by
// RegisterResponse.Validate if the designated constraints aren't met.
type RegisterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterResponseValidationError) ErrorName() string { return "RegisterResponseValidationError" }

// Error satisfies the builtin error interface
func (e RegisterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterResponseValidationError{}

// Validate checks the field values on RegisterGrpcServerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterGrpcServerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterGrpcServerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterGrpcServerRequestMultiError, or nil if none found.
func (m *RegisterGrpcServerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterGrpcServerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = RegisterGrpcServerRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Route

	if len(errors) > 0 {
		return RegisterGrpcServerRequestMultiError(errors)
	}

	return nil
}

func (m *RegisterGrpcServerRequest) _validateUuid(uuid string) error {
	if matched := _services_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RegisterGrpcServerRequestMultiError is an error wrapping multiple validation
// errors returned by RegisterGrpcServerRequest.ValidateAll() if the
// designated constraints aren't met.
type RegisterGrpcServerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterGrpcServerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterGrpcServerRequestMultiError) AllErrors() []error { return m }

// RegisterGrpcServerRequestValidationError is the validation error returned by
// RegisterGrpcServerRequest.Validate if the designated constraints aren't met.
type RegisterGrpcServerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterGrpcServerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterGrpcServerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterGrpcServerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterGrpcServerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterGrpcServerRequestValidationError) ErrorName() string {
	return "RegisterGrpcServerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterGrpcServerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterGrpcServerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterGrpcServerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterGrpcServerRequestValidationError{}

// Validate checks the field values on RegisterGrpcServerResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterGrpcServerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterGrpcServerResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterGrpcServerResponseMultiError, or nil if none found.
func (m *RegisterGrpcServerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterGrpcServerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Port

	if len(errors) > 0 {
		return RegisterGrpcServerResponseMultiError(errors)
	}

	return nil
}

// RegisterGrpcServerResponseMultiError is an error wrapping multiple
// validation errors returned by RegisterGrpcServerResponse.ValidateAll() if
// the designated constraints aren't met.
type RegisterGrpcServerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterGrpcServerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterGrpcServerResponseMultiError) AllErrors() []error { return m }

// RegisterGrpcServerResponseValidationError is the validation error returned
// by RegisterGrpcServerResponse.Validate if the designated constraints aren't met.
type RegisterGrpcServerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterGrpcServerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterGrpcServerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterGrpcServerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterGrpcServerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterGrpcServerResponseValidationError) ErrorName() string {
	return "RegisterGrpcServerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterGrpcServerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterGrpcServerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterGrpcServerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterGrpcServerResponseValidationError{}

// Validate checks the field values on RegisterHttpServerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterHttpServerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterHttpServerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterHttpServerRequestMultiError, or nil if none found.
func (m *RegisterHttpServerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterHttpServerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = RegisterHttpServerRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Route

	if len(errors) > 0 {
		return RegisterHttpServerRequestMultiError(errors)
	}

	return nil
}

func (m *RegisterHttpServerRequest) _validateUuid(uuid string) error {
	if matched := _services_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RegisterHttpServerRequestMultiError is an error wrapping multiple validation
// errors returned by RegisterHttpServerRequest.ValidateAll() if the
// designated constraints aren't met.
type RegisterHttpServerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterHttpServerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterHttpServerRequestMultiError) AllErrors() []error { return m }

// RegisterHttpServerRequestValidationError is the validation error returned by
// RegisterHttpServerRequest.Validate if the designated constraints aren't met.
type RegisterHttpServerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterHttpServerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterHttpServerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterHttpServerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterHttpServerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterHttpServerRequestValidationError) ErrorName() string {
	return "RegisterHttpServerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterHttpServerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterHttpServerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterHttpServerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterHttpServerRequestValidationError{}

// Validate checks the field values on RegisterHttpServerResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterHttpServerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterHttpServerResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterHttpServerResponseMultiError, or nil if none found.
func (m *RegisterHttpServerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterHttpServerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Port

	if len(errors) > 0 {
		return RegisterHttpServerResponseMultiError(errors)
	}

	return nil
}

// RegisterHttpServerResponseMultiError is an error wrapping multiple
// validation errors returned by RegisterHttpServerResponse.ValidateAll() if
// the designated constraints aren't met.
type RegisterHttpServerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterHttpServerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterHttpServerResponseMultiError) AllErrors() []error { return m }

// RegisterHttpServerResponseValidationError is the validation error returned
// by RegisterHttpServerResponse.Validate if the designated constraints aren't met.
type RegisterHttpServerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterHttpServerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterHttpServerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterHttpServerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterHttpServerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterHttpServerResponseValidationError) ErrorName() string {
	return "RegisterHttpServerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterHttpServerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterHttpServerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterHttpServerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterHttpServerResponseValidationError{}

// Validate checks the field values on RegisterConsumersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterConsumersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterConsumersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterConsumersRequestMultiError, or nil if none found.
func (m *RegisterConsumersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterConsumersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = RegisterConsumersRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetConsumers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RegisterConsumersRequestValidationError{
						field:  fmt.Sprintf("Consumers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RegisterConsumersRequestValidationError{
						field:  fmt.Sprintf("Consumers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RegisterConsumersRequestValidationError{
					field:  fmt.Sprintf("Consumers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RegisterConsumersRequestMultiError(errors)
	}

	return nil
}

func (m *RegisterConsumersRequest) _validateUuid(uuid string) error {
	if matched := _services_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RegisterConsumersRequestMultiError is an error wrapping multiple validation
// errors returned by RegisterConsumersRequest.ValidateAll() if the designated
// constraints aren't met.
type RegisterConsumersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterConsumersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterConsumersRequestMultiError) AllErrors() []error { return m }

// RegisterConsumersRequestValidationError is the validation error returned by
// RegisterConsumersRequest.Validate if the designated constraints aren't met.
type RegisterConsumersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterConsumersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterConsumersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterConsumersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterConsumersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterConsumersRequestValidationError) ErrorName() string {
	return "RegisterConsumersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterConsumersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterConsumersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterConsumersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterConsumersRequestValidationError{}

// Validate checks the field values on ConsumerRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ConsumerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConsumerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConsumerRequestMultiError, or nil if none found.
func (m *ConsumerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConsumerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := ConsumerKind_name[int32(m.GetKind())]; !ok {
		err := ConsumerRequestValidationError{
			field:  "Kind",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for EventSource

	if m.EventType != nil {
		// no validation rules for EventType
	}

	if len(errors) > 0 {
		return ConsumerRequestMultiError(errors)
	}

	return nil
}

// ConsumerRequestMultiError is an error wrapping multiple validation errors
// returned by ConsumerRequest.ValidateAll() if the designated constraints
// aren't met.
type ConsumerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConsumerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConsumerRequestMultiError) AllErrors() []error { return m }

// ConsumerRequestValidationError is the validation error returned by
// ConsumerRequest.Validate if the designated constraints aren't met.
type ConsumerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConsumerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConsumerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConsumerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConsumerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConsumerRequestValidationError) ErrorName() string { return "ConsumerRequestValidationError" }

// Error satisfies the builtin error interface
func (e ConsumerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConsumerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConsumerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConsumerRequestValidationError{}

// Validate checks the field values on RegisterConsumersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterConsumersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterConsumersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterConsumersResponseMultiError, or nil if none found.
func (m *RegisterConsumersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterConsumersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RegisterConsumersResponseMultiError(errors)
	}

	return nil
}

// RegisterConsumersResponseMultiError is an error wrapping multiple validation
// errors returned by RegisterConsumersResponse.ValidateAll() if the
// designated constraints aren't met.
type RegisterConsumersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterConsumersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterConsumersResponseMultiError) AllErrors() []error { return m }

// RegisterConsumersResponseValidationError is the validation error returned by
// RegisterConsumersResponse.Validate if the designated constraints aren't met.
type RegisterConsumersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterConsumersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterConsumersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterConsumersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterConsumersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterConsumersResponseValidationError) ErrorName() string {
	return "RegisterConsumersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterConsumersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterConsumersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterConsumersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterConsumersResponseValidationError{}

// Validate checks the field values on ConnectionRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ConnectionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConnectionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConnectionRequestMultiError, or nil if none found.
func (m *ConnectionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConnectionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Route

	if len(errors) > 0 {
		return ConnectionRequestMultiError(errors)
	}

	return nil
}

// ConnectionRequestMultiError is an error wrapping multiple validation errors
// returned by ConnectionRequest.ValidateAll() if the designated constraints
// aren't met.
type ConnectionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConnectionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConnectionRequestMultiError) AllErrors() []error { return m }

// ConnectionRequestValidationError is the validation error returned by
// ConnectionRequest.Validate if the designated constraints aren't met.
type ConnectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConnectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConnectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConnectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConnectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConnectionRequestValidationError) ErrorName() string {
	return "ConnectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConnectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConnectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConnectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConnectionRequestValidationError{}

// Validate checks the field values on ConnectionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConnectionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConnectionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConnectionResponseMultiError, or nil if none found.
func (m *ConnectionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ConnectionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Address

	// no validation rules for Status

	if len(errors) > 0 {
		return ConnectionResponseMultiError(errors)
	}

	return nil
}

// ConnectionResponseMultiError is an error wrapping multiple validation errors
// returned by ConnectionResponse.ValidateAll() if the designated constraints
// aren't met.
type ConnectionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConnectionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConnectionResponseMultiError) AllErrors() []error { return m }

// ConnectionResponseValidationError is the validation error returned by
// ConnectionResponse.Validate if the designated constraints aren't met.
type ConnectionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConnectionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConnectionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConnectionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConnectionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConnectionResponseValidationError) ErrorName() string {
	return "ConnectionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ConnectionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConnectionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConnectionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConnectionResponseValidationError{}
