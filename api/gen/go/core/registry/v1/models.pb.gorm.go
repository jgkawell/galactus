package v1

import (
	context "context"
	fmt "fmt"
	gorm1 "github.com/infobloxopen/atlas-app-toolkit/gorm"
	errors "github.com/infobloxopen/protoc-gen-gorm/errors"
	gorm "github.com/jinzhu/gorm"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

type RegistrationORM struct {
	Domain  string `gorm:"unique_index:idx"`
	Id      string `gorm:"type:uuid;primary_key"`
	Name    string `gorm:"unique_index:idx"`
	Status  int32
	Version string `gorm:"unique_index:idx"`
}

// TableName overrides the default tablename generated by GORM
func (RegistrationORM) TableName() string {
	return "registrations"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Registration) ToORM(ctx context.Context) (RegistrationORM, error) {
	to := RegistrationORM{}
	var err error
	if prehook, ok := interface{}(m).(RegistrationWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Domain = m.Domain
	to.Name = m.Name
	to.Version = m.Version
	to.Status = int32(m.Status)
	if posthook, ok := interface{}(m).(RegistrationWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *RegistrationORM) ToPB(ctx context.Context) (Registration, error) {
	to := Registration{}
	var err error
	if prehook, ok := interface{}(m).(RegistrationWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Domain = m.Domain
	to.Name = m.Name
	to.Version = m.Version
	to.Status = ServiceStatus(m.Status)
	if posthook, ok := interface{}(m).(RegistrationWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Registration the arg will be the target, the caller the one being converted from

// RegistrationBeforeToORM called before default ToORM code
type RegistrationWithBeforeToORM interface {
	BeforeToORM(context.Context, *RegistrationORM) error
}

// RegistrationAfterToORM called after default ToORM code
type RegistrationWithAfterToORM interface {
	AfterToORM(context.Context, *RegistrationORM) error
}

// RegistrationBeforeToPB called before default ToPB code
type RegistrationWithBeforeToPB interface {
	BeforeToPB(context.Context, *Registration) error
}

// RegistrationAfterToPB called after default ToPB code
type RegistrationWithAfterToPB interface {
	AfterToPB(context.Context, *Registration) error
}

type ServerORM struct {
	Host   string
	Id     string `gorm:"type:uuid;primary_key"`
	Kind   int32
	Port   string
	Route  string
	Scheme string
}

// TableName overrides the default tablename generated by GORM
func (ServerORM) TableName() string {
	return "servers"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Server) ToORM(ctx context.Context) (ServerORM, error) {
	to := ServerORM{}
	var err error
	if prehook, ok := interface{}(m).(ServerWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Scheme = m.Scheme
	to.Host = m.Host
	to.Port = m.Port
	to.Route = m.Route
	to.Kind = int32(m.Kind)
	if posthook, ok := interface{}(m).(ServerWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *ServerORM) ToPB(ctx context.Context) (Server, error) {
	to := Server{}
	var err error
	if prehook, ok := interface{}(m).(ServerWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Scheme = m.Scheme
	to.Host = m.Host
	to.Port = m.Port
	to.Route = m.Route
	to.Kind = ServerKind(m.Kind)
	if posthook, ok := interface{}(m).(ServerWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Server the arg will be the target, the caller the one being converted from

// ServerBeforeToORM called before default ToORM code
type ServerWithBeforeToORM interface {
	BeforeToORM(context.Context, *ServerORM) error
}

// ServerAfterToORM called after default ToORM code
type ServerWithAfterToORM interface {
	AfterToORM(context.Context, *ServerORM) error
}

// ServerBeforeToPB called before default ToPB code
type ServerWithBeforeToPB interface {
	BeforeToPB(context.Context, *Server) error
}

// ServerAfterToPB called after default ToPB code
type ServerWithAfterToPB interface {
	AfterToPB(context.Context, *Server) error
}

type ConsumerORM struct {
	EventSource string
	EventType   string
	Id          string `gorm:"type:uuid;primary_key"`
	Kind        int32
}

// TableName overrides the default tablename generated by GORM
func (ConsumerORM) TableName() string {
	return "consumers"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Consumer) ToORM(ctx context.Context) (ConsumerORM, error) {
	to := ConsumerORM{}
	var err error
	if prehook, ok := interface{}(m).(ConsumerWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.EventSource = m.EventSource
	to.EventType = m.EventType
	to.Kind = int32(m.Kind)
	if posthook, ok := interface{}(m).(ConsumerWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *ConsumerORM) ToPB(ctx context.Context) (Consumer, error) {
	to := Consumer{}
	var err error
	if prehook, ok := interface{}(m).(ConsumerWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.EventSource = m.EventSource
	to.EventType = m.EventType
	to.Kind = ConsumerKind(m.Kind)
	if posthook, ok := interface{}(m).(ConsumerWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Consumer the arg will be the target, the caller the one being converted from

// ConsumerBeforeToORM called before default ToORM code
type ConsumerWithBeforeToORM interface {
	BeforeToORM(context.Context, *ConsumerORM) error
}

// ConsumerAfterToORM called after default ToORM code
type ConsumerWithAfterToORM interface {
	AfterToORM(context.Context, *ConsumerORM) error
}

// ConsumerBeforeToPB called before default ToPB code
type ConsumerWithBeforeToPB interface {
	BeforeToPB(context.Context, *Consumer) error
}

// ConsumerAfterToPB called after default ToPB code
type ConsumerWithAfterToPB interface {
	AfterToPB(context.Context, *Consumer) error
}

// DefaultCreateRegistration executes a basic gorm create call
func DefaultCreateRegistration(ctx context.Context, in *Registration, db *gorm.DB) (*Registration, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RegistrationORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RegistrationORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type RegistrationORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RegistrationORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadRegistration(ctx context.Context, in *Registration, db *gorm.DB) (*Registration, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(RegistrationORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &RegistrationORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RegistrationORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := RegistrationORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(RegistrationORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type RegistrationORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RegistrationORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RegistrationORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteRegistration(ctx context.Context, in *Registration, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == "" {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(RegistrationORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&RegistrationORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(RegistrationORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type RegistrationORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RegistrationORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteRegistrationSet(ctx context.Context, in []*Registration, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []string{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == "" {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&RegistrationORM{})).(RegistrationORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&RegistrationORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&RegistrationORM{})).(RegistrationORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type RegistrationORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Registration, *gorm.DB) (*gorm.DB, error)
}
type RegistrationORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Registration, *gorm.DB) error
}

// DefaultStrictUpdateRegistration clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateRegistration(ctx context.Context, in *Registration, db *gorm.DB) (*Registration, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateRegistration")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &RegistrationORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(RegistrationORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(RegistrationORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RegistrationORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type RegistrationORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RegistrationORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RegistrationORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchRegistration executes a basic gorm update call with patch behavior
func DefaultPatchRegistration(ctx context.Context, in *Registration, updateMask *field_mask.FieldMask, db *gorm.DB) (*Registration, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Registration
	var err error
	if hook, ok := interface{}(&pbObj).(RegistrationWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadRegistration(ctx, &Registration{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(RegistrationWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskRegistration(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(RegistrationWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateRegistration(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(RegistrationWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type RegistrationWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Registration, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type RegistrationWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Registration, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type RegistrationWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Registration, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type RegistrationWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Registration, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetRegistration executes a bulk gorm update call with patch behavior
func DefaultPatchSetRegistration(ctx context.Context, objects []*Registration, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Registration, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Registration, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchRegistration(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskRegistration patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskRegistration(ctx context.Context, patchee *Registration, patcher *Registration, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Registration, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Domain" {
			patchee.Domain = patcher.Domain
			continue
		}
		if f == prefix+"Name" {
			patchee.Name = patcher.Name
			continue
		}
		if f == prefix+"Version" {
			patchee.Version = patcher.Version
			continue
		}
		if f == prefix+"Status" {
			patchee.Status = patcher.Status
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListRegistration executes a gorm list call
func DefaultListRegistration(ctx context.Context, db *gorm.DB) ([]*Registration, error) {
	in := Registration{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RegistrationORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &RegistrationORM{}, &Registration{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RegistrationORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []RegistrationORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RegistrationORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Registration{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type RegistrationORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RegistrationORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RegistrationORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]RegistrationORM) error
}

// DefaultCreateServer executes a basic gorm create call
func DefaultCreateServer(ctx context.Context, in *Server, db *gorm.DB) (*Server, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ServerORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ServerORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type ServerORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ServerORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadServer(ctx context.Context, in *Server, db *gorm.DB) (*Server, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(ServerORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &ServerORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ServerORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := ServerORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(ServerORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type ServerORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ServerORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ServerORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteServer(ctx context.Context, in *Server, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == "" {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(ServerORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&ServerORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(ServerORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type ServerORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ServerORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteServerSet(ctx context.Context, in []*Server, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []string{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == "" {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&ServerORM{})).(ServerORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&ServerORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&ServerORM{})).(ServerORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type ServerORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Server, *gorm.DB) (*gorm.DB, error)
}
type ServerORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Server, *gorm.DB) error
}

// DefaultStrictUpdateServer clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateServer(ctx context.Context, in *Server, db *gorm.DB) (*Server, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateServer")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &ServerORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(ServerORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(ServerORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ServerORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type ServerORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ServerORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ServerORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchServer executes a basic gorm update call with patch behavior
func DefaultPatchServer(ctx context.Context, in *Server, updateMask *field_mask.FieldMask, db *gorm.DB) (*Server, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Server
	var err error
	if hook, ok := interface{}(&pbObj).(ServerWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadServer(ctx, &Server{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(ServerWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskServer(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(ServerWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateServer(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(ServerWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type ServerWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Server, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type ServerWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Server, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type ServerWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Server, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type ServerWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Server, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetServer executes a bulk gorm update call with patch behavior
func DefaultPatchSetServer(ctx context.Context, objects []*Server, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Server, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Server, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchServer(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskServer patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskServer(ctx context.Context, patchee *Server, patcher *Server, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Server, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Scheme" {
			patchee.Scheme = patcher.Scheme
			continue
		}
		if f == prefix+"Host" {
			patchee.Host = patcher.Host
			continue
		}
		if f == prefix+"Port" {
			patchee.Port = patcher.Port
			continue
		}
		if f == prefix+"Route" {
			patchee.Route = patcher.Route
			continue
		}
		if f == prefix+"Kind" {
			patchee.Kind = patcher.Kind
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListServer executes a gorm list call
func DefaultListServer(ctx context.Context, db *gorm.DB) ([]*Server, error) {
	in := Server{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ServerORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &ServerORM{}, &Server{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ServerORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []ServerORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ServerORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Server{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type ServerORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ServerORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ServerORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]ServerORM) error
}

// DefaultCreateConsumer executes a basic gorm create call
func DefaultCreateConsumer(ctx context.Context, in *Consumer, db *gorm.DB) (*Consumer, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ConsumerORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ConsumerORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type ConsumerORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ConsumerORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadConsumer(ctx context.Context, in *Consumer, db *gorm.DB) (*Consumer, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(ConsumerORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &ConsumerORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ConsumerORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := ConsumerORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(ConsumerORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type ConsumerORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ConsumerORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ConsumerORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteConsumer(ctx context.Context, in *Consumer, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == "" {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(ConsumerORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&ConsumerORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(ConsumerORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type ConsumerORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ConsumerORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteConsumerSet(ctx context.Context, in []*Consumer, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []string{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == "" {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&ConsumerORM{})).(ConsumerORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&ConsumerORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&ConsumerORM{})).(ConsumerORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type ConsumerORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Consumer, *gorm.DB) (*gorm.DB, error)
}
type ConsumerORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Consumer, *gorm.DB) error
}

// DefaultStrictUpdateConsumer clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateConsumer(ctx context.Context, in *Consumer, db *gorm.DB) (*Consumer, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateConsumer")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &ConsumerORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(ConsumerORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(ConsumerORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ConsumerORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type ConsumerORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ConsumerORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ConsumerORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchConsumer executes a basic gorm update call with patch behavior
func DefaultPatchConsumer(ctx context.Context, in *Consumer, updateMask *field_mask.FieldMask, db *gorm.DB) (*Consumer, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Consumer
	var err error
	if hook, ok := interface{}(&pbObj).(ConsumerWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadConsumer(ctx, &Consumer{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(ConsumerWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskConsumer(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(ConsumerWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateConsumer(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(ConsumerWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type ConsumerWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Consumer, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type ConsumerWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Consumer, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type ConsumerWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Consumer, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type ConsumerWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Consumer, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetConsumer executes a bulk gorm update call with patch behavior
func DefaultPatchSetConsumer(ctx context.Context, objects []*Consumer, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Consumer, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Consumer, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchConsumer(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskConsumer patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskConsumer(ctx context.Context, patchee *Consumer, patcher *Consumer, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Consumer, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"EventSource" {
			patchee.EventSource = patcher.EventSource
			continue
		}
		if f == prefix+"EventType" {
			patchee.EventType = patcher.EventType
			continue
		}
		if f == prefix+"Kind" {
			patchee.Kind = patcher.Kind
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListConsumer executes a gorm list call
func DefaultListConsumer(ctx context.Context, db *gorm.DB) ([]*Consumer, error) {
	in := Consumer{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ConsumerORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &ConsumerORM{}, &Consumer{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ConsumerORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []ConsumerORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ConsumerORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Consumer{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type ConsumerORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ConsumerORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ConsumerORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]ConsumerORM) error
}
