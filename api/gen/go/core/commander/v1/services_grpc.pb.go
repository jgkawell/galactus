// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: core/commander/v1/services.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CommandHandler_Apply_FullMethodName = "/core.command.v1.CommandHandler/Apply"
)

// CommandHandlerClient is the client API for CommandHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommandHandlerClient interface {
	// this is ASYNCHRONOUS and will only return a transaction ID. the client should listen for
	// a completed event on the notifier service
	Apply(ctx context.Context, in *ApplyCommandRequest, opts ...grpc.CallOption) (*ApplyCommandResponse, error)
}

type commandHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewCommandHandlerClient(cc grpc.ClientConnInterface) CommandHandlerClient {
	return &commandHandlerClient{cc}
}

func (c *commandHandlerClient) Apply(ctx context.Context, in *ApplyCommandRequest, opts ...grpc.CallOption) (*ApplyCommandResponse, error) {
	out := new(ApplyCommandResponse)
	err := c.cc.Invoke(ctx, CommandHandler_Apply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommandHandlerServer is the server API for CommandHandler service.
// All implementations should embed UnimplementedCommandHandlerServer
// for forward compatibility
type CommandHandlerServer interface {
	// this is ASYNCHRONOUS and will only return a transaction ID. the client should listen for
	// a completed event on the notifier service
	Apply(context.Context, *ApplyCommandRequest) (*ApplyCommandResponse, error)
}

// UnimplementedCommandHandlerServer should be embedded to have forward compatible implementations.
type UnimplementedCommandHandlerServer struct {
}

func (UnimplementedCommandHandlerServer) Apply(context.Context, *ApplyCommandRequest) (*ApplyCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Apply not implemented")
}

// UnsafeCommandHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommandHandlerServer will
// result in compilation errors.
type UnsafeCommandHandlerServer interface {
	mustEmbedUnimplementedCommandHandlerServer()
}

func RegisterCommandHandlerServer(s grpc.ServiceRegistrar, srv CommandHandlerServer) {
	s.RegisterService(&CommandHandler_ServiceDesc, srv)
}

func _CommandHandler_Apply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandHandlerServer).Apply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommandHandler_Apply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandHandlerServer).Apply(ctx, req.(*ApplyCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommandHandler_ServiceDesc is the grpc.ServiceDesc for CommandHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommandHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "core.command.v1.CommandHandler",
	HandlerType: (*CommandHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Apply",
			Handler:    _CommandHandler_Apply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "core/commander/v1/services.proto",
}
