// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: core/notifier/v1/services.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Notifier_Connect_FullMethodName = "/core.notifier.v1.Notifier/Connect"
)

// NotifierClient is the client API for Notifier service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotifierClient interface {
	// Connect a web-client
	Connect(ctx context.Context, in *ConnectionRequest, opts ...grpc.CallOption) (Notifier_ConnectClient, error)
}

type notifierClient struct {
	cc grpc.ClientConnInterface
}

func NewNotifierClient(cc grpc.ClientConnInterface) NotifierClient {
	return &notifierClient{cc}
}

func (c *notifierClient) Connect(ctx context.Context, in *ConnectionRequest, opts ...grpc.CallOption) (Notifier_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &Notifier_ServiceDesc.Streams[0], Notifier_Connect_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &notifierConnectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Notifier_ConnectClient interface {
	Recv() (*Notification, error)
	grpc.ClientStream
}

type notifierConnectClient struct {
	grpc.ClientStream
}

func (x *notifierConnectClient) Recv() (*Notification, error) {
	m := new(Notification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NotifierServer is the server API for Notifier service.
// All implementations should embed UnimplementedNotifierServer
// for forward compatibility
type NotifierServer interface {
	// Connect a web-client
	Connect(*ConnectionRequest, Notifier_ConnectServer) error
}

// UnimplementedNotifierServer should be embedded to have forward compatible implementations.
type UnimplementedNotifierServer struct {
}

func (UnimplementedNotifierServer) Connect(*ConnectionRequest, Notifier_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}

// UnsafeNotifierServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotifierServer will
// result in compilation errors.
type UnsafeNotifierServer interface {
	mustEmbedUnimplementedNotifierServer()
}

func RegisterNotifierServer(s grpc.ServiceRegistrar, srv NotifierServer) {
	s.RegisterService(&Notifier_ServiceDesc, srv)
}

func _Notifier_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConnectionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NotifierServer).Connect(m, &notifierConnectServer{stream})
}

type Notifier_ConnectServer interface {
	Send(*Notification) error
	grpc.ServerStream
}

type notifierConnectServer struct {
	grpc.ServerStream
}

func (x *notifierConnectServer) Send(m *Notification) error {
	return x.ServerStream.SendMsg(m)
}

// Notifier_ServiceDesc is the grpc.ServiceDesc for Notifier service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Notifier_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "core.notifier.v1.Notifier",
	HandlerType: (*NotifierServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _Notifier_Connect_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "core/notifier/v1/services.proto",
}
