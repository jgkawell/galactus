// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: options/gorm.proto

package gorm

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GormFileOptions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GormFileOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GormFileOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GormFileOptionsMultiError, or nil if none found.
func (m *GormFileOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *GormFileOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GormFileOptionsMultiError(errors)
	}

	return nil
}

// GormFileOptionsMultiError is an error wrapping multiple validation errors
// returned by GormFileOptions.ValidateAll() if the designated constraints
// aren't met.
type GormFileOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GormFileOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GormFileOptionsMultiError) AllErrors() []error { return m }

// GormFileOptionsValidationError is the validation error returned by
// GormFileOptions.Validate if the designated constraints aren't met.
type GormFileOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GormFileOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GormFileOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GormFileOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GormFileOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GormFileOptionsValidationError) ErrorName() string { return "GormFileOptionsValidationError" }

// Error satisfies the builtin error interface
func (e GormFileOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGormFileOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GormFileOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GormFileOptionsValidationError{}

// Validate checks the field values on GormMessageOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GormMessageOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GormMessageOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GormMessageOptionsMultiError, or nil if none found.
func (m *GormMessageOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *GormMessageOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ormable

	for idx, item := range m.GetInclude() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GormMessageOptionsValidationError{
						field:  fmt.Sprintf("Include[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GormMessageOptionsValidationError{
						field:  fmt.Sprintf("Include[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GormMessageOptionsValidationError{
					field:  fmt.Sprintf("Include[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Table

	// no validation rules for MultiAccount

	if len(errors) > 0 {
		return GormMessageOptionsMultiError(errors)
	}

	return nil
}

// GormMessageOptionsMultiError is an error wrapping multiple validation errors
// returned by GormMessageOptions.ValidateAll() if the designated constraints
// aren't met.
type GormMessageOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GormMessageOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GormMessageOptionsMultiError) AllErrors() []error { return m }

// GormMessageOptionsValidationError is the validation error returned by
// GormMessageOptions.Validate if the designated constraints aren't met.
type GormMessageOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GormMessageOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GormMessageOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GormMessageOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GormMessageOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GormMessageOptionsValidationError) ErrorName() string {
	return "GormMessageOptionsValidationError"
}

// Error satisfies the builtin error interface
func (e GormMessageOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGormMessageOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GormMessageOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GormMessageOptionsValidationError{}

// Validate checks the field values on ExtraField with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExtraField) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExtraField with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExtraFieldMultiError, or
// nil if none found.
func (m *ExtraField) ValidateAll() error {
	return m.validate(true)
}

func (m *ExtraField) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetTag()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExtraFieldValidationError{
					field:  "Tag",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExtraFieldValidationError{
					field:  "Tag",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTag()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExtraFieldValidationError{
				field:  "Tag",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Package

	if len(errors) > 0 {
		return ExtraFieldMultiError(errors)
	}

	return nil
}

// ExtraFieldMultiError is an error wrapping multiple validation errors
// returned by ExtraField.ValidateAll() if the designated constraints aren't met.
type ExtraFieldMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExtraFieldMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExtraFieldMultiError) AllErrors() []error { return m }

// ExtraFieldValidationError is the validation error returned by
// ExtraField.Validate if the designated constraints aren't met.
type ExtraFieldValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExtraFieldValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExtraFieldValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExtraFieldValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExtraFieldValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExtraFieldValidationError) ErrorName() string { return "ExtraFieldValidationError" }

// Error satisfies the builtin error interface
func (e ExtraFieldValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExtraField.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExtraFieldValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExtraFieldValidationError{}

// Validate checks the field values on GormFieldOptions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GormFieldOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GormFieldOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GormFieldOptionsMultiError, or nil if none found.
func (m *GormFieldOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *GormFieldOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTag()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GormFieldOptionsValidationError{
					field:  "Tag",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GormFieldOptionsValidationError{
					field:  "Tag",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTag()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GormFieldOptionsValidationError{
				field:  "Tag",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Drop

	// no validation rules for ReferenceOf

	switch v := m.Association.(type) {
	case *GormFieldOptions_HasOne:
		if v == nil {
			err := GormFieldOptionsValidationError{
				field:  "Association",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetHasOne()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GormFieldOptionsValidationError{
						field:  "HasOne",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GormFieldOptionsValidationError{
						field:  "HasOne",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHasOne()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GormFieldOptionsValidationError{
					field:  "HasOne",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GormFieldOptions_BelongsTo:
		if v == nil {
			err := GormFieldOptionsValidationError{
				field:  "Association",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetBelongsTo()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GormFieldOptionsValidationError{
						field:  "BelongsTo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GormFieldOptionsValidationError{
						field:  "BelongsTo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBelongsTo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GormFieldOptionsValidationError{
					field:  "BelongsTo",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GormFieldOptions_HasMany:
		if v == nil {
			err := GormFieldOptionsValidationError{
				field:  "Association",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetHasMany()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GormFieldOptionsValidationError{
						field:  "HasMany",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GormFieldOptionsValidationError{
						field:  "HasMany",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHasMany()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GormFieldOptionsValidationError{
					field:  "HasMany",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GormFieldOptions_ManyToMany:
		if v == nil {
			err := GormFieldOptionsValidationError{
				field:  "Association",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetManyToMany()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GormFieldOptionsValidationError{
						field:  "ManyToMany",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GormFieldOptionsValidationError{
						field:  "ManyToMany",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetManyToMany()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GormFieldOptionsValidationError{
					field:  "ManyToMany",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GormFieldOptionsMultiError(errors)
	}

	return nil
}

// GormFieldOptionsMultiError is an error wrapping multiple validation errors
// returned by GormFieldOptions.ValidateAll() if the designated constraints
// aren't met.
type GormFieldOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GormFieldOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GormFieldOptionsMultiError) AllErrors() []error { return m }

// GormFieldOptionsValidationError is the validation error returned by
// GormFieldOptions.Validate if the designated constraints aren't met.
type GormFieldOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GormFieldOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GormFieldOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GormFieldOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GormFieldOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GormFieldOptionsValidationError) ErrorName() string { return "GormFieldOptionsValidationError" }

// Error satisfies the builtin error interface
func (e GormFieldOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGormFieldOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GormFieldOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GormFieldOptionsValidationError{}

// Validate checks the field values on GormTag with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GormTag) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GormTag with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in GormTagMultiError, or nil if none found.
func (m *GormTag) ValidateAll() error {
	return m.validate(true)
}

func (m *GormTag) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Column

	// no validation rules for Type

	// no validation rules for Size

	// no validation rules for Precision

	// no validation rules for PrimaryKey

	// no validation rules for Unique

	// no validation rules for Default

	// no validation rules for NotNull

	// no validation rules for AutoIncrement

	// no validation rules for Index

	// no validation rules for UniqueIndex

	// no validation rules for Embedded

	// no validation rules for EmbeddedPrefix

	// no validation rules for Ignore

	// no validation rules for Foreignkey

	// no validation rules for AssociationForeignkey

	// no validation rules for ManyToMany

	// no validation rules for JointableForeignkey

	// no validation rules for AssociationJointableForeignkey

	// no validation rules for AssociationAutoupdate

	// no validation rules for AssociationAutocreate

	// no validation rules for AssociationSaveReference

	// no validation rules for Preload

	if len(errors) > 0 {
		return GormTagMultiError(errors)
	}

	return nil
}

// GormTagMultiError is an error wrapping multiple validation errors returned
// by GormTag.ValidateAll() if the designated constraints aren't met.
type GormTagMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GormTagMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GormTagMultiError) AllErrors() []error { return m }

// GormTagValidationError is the validation error returned by GormTag.Validate
// if the designated constraints aren't met.
type GormTagValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GormTagValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GormTagValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GormTagValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GormTagValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GormTagValidationError) ErrorName() string { return "GormTagValidationError" }

// Error satisfies the builtin error interface
func (e GormTagValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGormTag.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GormTagValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GormTagValidationError{}

// Validate checks the field values on HasOneOptions with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HasOneOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HasOneOptions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HasOneOptionsMultiError, or
// nil if none found.
func (m *HasOneOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *HasOneOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Foreignkey

	if all {
		switch v := interface{}(m.GetForeignkeyTag()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HasOneOptionsValidationError{
					field:  "ForeignkeyTag",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HasOneOptionsValidationError{
					field:  "ForeignkeyTag",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetForeignkeyTag()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HasOneOptionsValidationError{
				field:  "ForeignkeyTag",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AssociationForeignkey

	// no validation rules for AssociationAutoupdate

	// no validation rules for AssociationAutocreate

	// no validation rules for AssociationSaveReference

	// no validation rules for Preload

	// no validation rules for Replace

	// no validation rules for Append

	// no validation rules for Clear

	if len(errors) > 0 {
		return HasOneOptionsMultiError(errors)
	}

	return nil
}

// HasOneOptionsMultiError is an error wrapping multiple validation errors
// returned by HasOneOptions.ValidateAll() if the designated constraints
// aren't met.
type HasOneOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HasOneOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HasOneOptionsMultiError) AllErrors() []error { return m }

// HasOneOptionsValidationError is the validation error returned by
// HasOneOptions.Validate if the designated constraints aren't met.
type HasOneOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HasOneOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HasOneOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HasOneOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HasOneOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HasOneOptionsValidationError) ErrorName() string { return "HasOneOptionsValidationError" }

// Error satisfies the builtin error interface
func (e HasOneOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHasOneOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HasOneOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HasOneOptionsValidationError{}

// Validate checks the field values on BelongsToOptions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BelongsToOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BelongsToOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BelongsToOptionsMultiError, or nil if none found.
func (m *BelongsToOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *BelongsToOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Foreignkey

	if all {
		switch v := interface{}(m.GetForeignkeyTag()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BelongsToOptionsValidationError{
					field:  "ForeignkeyTag",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BelongsToOptionsValidationError{
					field:  "ForeignkeyTag",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetForeignkeyTag()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BelongsToOptionsValidationError{
				field:  "ForeignkeyTag",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AssociationForeignkey

	// no validation rules for AssociationAutoupdate

	// no validation rules for AssociationAutocreate

	// no validation rules for AssociationSaveReference

	// no validation rules for Preload

	if len(errors) > 0 {
		return BelongsToOptionsMultiError(errors)
	}

	return nil
}

// BelongsToOptionsMultiError is an error wrapping multiple validation errors
// returned by BelongsToOptions.ValidateAll() if the designated constraints
// aren't met.
type BelongsToOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BelongsToOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BelongsToOptionsMultiError) AllErrors() []error { return m }

// BelongsToOptionsValidationError is the validation error returned by
// BelongsToOptions.Validate if the designated constraints aren't met.
type BelongsToOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BelongsToOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BelongsToOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BelongsToOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BelongsToOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BelongsToOptionsValidationError) ErrorName() string { return "BelongsToOptionsValidationError" }

// Error satisfies the builtin error interface
func (e BelongsToOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBelongsToOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BelongsToOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BelongsToOptionsValidationError{}

// Validate checks the field values on HasManyOptions with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HasManyOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HasManyOptions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HasManyOptionsMultiError,
// or nil if none found.
func (m *HasManyOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *HasManyOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Foreignkey

	if all {
		switch v := interface{}(m.GetForeignkeyTag()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HasManyOptionsValidationError{
					field:  "ForeignkeyTag",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HasManyOptionsValidationError{
					field:  "ForeignkeyTag",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetForeignkeyTag()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HasManyOptionsValidationError{
				field:  "ForeignkeyTag",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AssociationForeignkey

	// no validation rules for PositionField

	if all {
		switch v := interface{}(m.GetPositionFieldTag()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HasManyOptionsValidationError{
					field:  "PositionFieldTag",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HasManyOptionsValidationError{
					field:  "PositionFieldTag",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPositionFieldTag()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HasManyOptionsValidationError{
				field:  "PositionFieldTag",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AssociationAutoupdate

	// no validation rules for AssociationAutocreate

	// no validation rules for AssociationSaveReference

	// no validation rules for Preload

	// no validation rules for Replace

	// no validation rules for Append

	// no validation rules for Clear

	if len(errors) > 0 {
		return HasManyOptionsMultiError(errors)
	}

	return nil
}

// HasManyOptionsMultiError is an error wrapping multiple validation errors
// returned by HasManyOptions.ValidateAll() if the designated constraints
// aren't met.
type HasManyOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HasManyOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HasManyOptionsMultiError) AllErrors() []error { return m }

// HasManyOptionsValidationError is the validation error returned by
// HasManyOptions.Validate if the designated constraints aren't met.
type HasManyOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HasManyOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HasManyOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HasManyOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HasManyOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HasManyOptionsValidationError) ErrorName() string { return "HasManyOptionsValidationError" }

// Error satisfies the builtin error interface
func (e HasManyOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHasManyOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HasManyOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HasManyOptionsValidationError{}

// Validate checks the field values on ManyToManyOptions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ManyToManyOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ManyToManyOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ManyToManyOptionsMultiError, or nil if none found.
func (m *ManyToManyOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *ManyToManyOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Jointable

	// no validation rules for Foreignkey

	// no validation rules for JointableForeignkey

	// no validation rules for AssociationForeignkey

	// no validation rules for AssociationJointableForeignkey

	// no validation rules for AssociationAutoupdate

	// no validation rules for AssociationAutocreate

	// no validation rules for AssociationSaveReference

	// no validation rules for Preload

	// no validation rules for Replace

	// no validation rules for Append

	// no validation rules for Clear

	if len(errors) > 0 {
		return ManyToManyOptionsMultiError(errors)
	}

	return nil
}

// ManyToManyOptionsMultiError is an error wrapping multiple validation errors
// returned by ManyToManyOptions.ValidateAll() if the designated constraints
// aren't met.
type ManyToManyOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ManyToManyOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ManyToManyOptionsMultiError) AllErrors() []error { return m }

// ManyToManyOptionsValidationError is the validation error returned by
// ManyToManyOptions.Validate if the designated constraints aren't met.
type ManyToManyOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ManyToManyOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ManyToManyOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ManyToManyOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ManyToManyOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ManyToManyOptionsValidationError) ErrorName() string {
	return "ManyToManyOptionsValidationError"
}

// Error satisfies the builtin error interface
func (e ManyToManyOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sManyToManyOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ManyToManyOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ManyToManyOptionsValidationError{}

// Validate checks the field values on AutoServerOptions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AutoServerOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AutoServerOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AutoServerOptionsMultiError, or nil if none found.
func (m *AutoServerOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *AutoServerOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Autogen

	// no validation rules for TxnMiddleware

	// no validation rules for WithTracing

	if len(errors) > 0 {
		return AutoServerOptionsMultiError(errors)
	}

	return nil
}

// AutoServerOptionsMultiError is an error wrapping multiple validation errors
// returned by AutoServerOptions.ValidateAll() if the designated constraints
// aren't met.
type AutoServerOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AutoServerOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AutoServerOptionsMultiError) AllErrors() []error { return m }

// AutoServerOptionsValidationError is the validation error returned by
// AutoServerOptions.Validate if the designated constraints aren't met.
type AutoServerOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AutoServerOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AutoServerOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AutoServerOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AutoServerOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AutoServerOptionsValidationError) ErrorName() string {
	return "AutoServerOptionsValidationError"
}

// Error satisfies the builtin error interface
func (e AutoServerOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAutoServerOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AutoServerOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AutoServerOptionsValidationError{}

// Validate checks the field values on MethodOptions with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MethodOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MethodOptions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MethodOptionsMultiError, or
// nil if none found.
func (m *MethodOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *MethodOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ObjectType

	if len(errors) > 0 {
		return MethodOptionsMultiError(errors)
	}

	return nil
}

// MethodOptionsMultiError is an error wrapping multiple validation errors
// returned by MethodOptions.ValidateAll() if the designated constraints
// aren't met.
type MethodOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MethodOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MethodOptionsMultiError) AllErrors() []error { return m }

// MethodOptionsValidationError is the validation error returned by
// MethodOptions.Validate if the designated constraints aren't met.
type MethodOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MethodOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MethodOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MethodOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MethodOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MethodOptionsValidationError) ErrorName() string { return "MethodOptionsValidationError" }

// Error satisfies the builtin error interface
func (e MethodOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMethodOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MethodOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MethodOptionsValidationError{}
