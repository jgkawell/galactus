package v1

import (
	context "context"
)

type TodoORM struct {
	Description string `gorm:"type:uuid"`
	Id          string `gorm:"type:uuid;primary_key"`
	Status      int32  `gorm:"type:enum?;not null"`
	Title       string `gorm:"type:uuid;not null"`
}

// TableName overrides the default tablename generated by GORM
func (TodoORM) TableName() string {
	return "todos"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Todo) ToORM(ctx context.Context) (TodoORM, error) {
	to := TodoORM{}
	var err error
	if prehook, ok := interface{}(m).(TodoWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Title = m.Title
	to.Description = m.Description
	to.Status = int32(m.Status)
	if posthook, ok := interface{}(m).(TodoWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *TodoORM) ToPB(ctx context.Context) (Todo, error) {
	to := Todo{}
	var err error
	if prehook, ok := interface{}(m).(TodoWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Title = m.Title
	to.Description = m.Description
	to.Status = TodoStatus(m.Status)
	if posthook, ok := interface{}(m).(TodoWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Todo the arg will be the target, the caller the one being converted from

// TodoBeforeToORM called before default ToORM code
type TodoWithBeforeToORM interface {
	BeforeToORM(context.Context, *TodoORM) error
}

// TodoAfterToORM called after default ToORM code
type TodoWithAfterToORM interface {
	AfterToORM(context.Context, *TodoORM) error
}

// TodoBeforeToPB called before default ToPB code
type TodoWithBeforeToPB interface {
	BeforeToPB(context.Context, *Todo) error
}

// TodoAfterToPB called after default ToPB code
type TodoWithAfterToPB interface {
	AfterToPB(context.Context, *Todo) error
}
