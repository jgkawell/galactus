syntax = "proto3";

package core.aggregates.v1;

option go_package = "github.com/circadence-official/galactus/api/gen/go/core/aggregates/v1";

import "validate/validate.proto";
import "options/gorm.proto";
import "google/protobuf/timestamp.proto";

message Event {
    option (gorm.opts).ormable = true;

    // METADATA

    // the table primary key
    string id = 1 [(validate.rules).string.uuid = true, (gorm.field).tag = {type: "uuid" primary_key: true}];
    // the time the event create request was received
    google.protobuf.Timestamp received_time = 2 [(gorm.field).tag = {type: "timestamp"}];
    // the time the event was been published to it's respective topic/queue
    google.protobuf.Timestamp published_time = 3 [(gorm.field).tag = {type: "timestamp"}];
    // uuid generated by the caller (e.g. commandhandler) and received by the client (e.g. react app)
    string transaction_id = 4 [(validate.rules).string.uuid = true];

    // EVENT DATA

    // the string identifier (enum value) of the aggregate type this event belongs to
    // NOTE: this is simply a string to keep the eventstore from depending on changing types
    string aggregate_type = 17;
    // the string identifier of the event type
    // NOTE: this is simply a string to keep the eventstore from depending on changing types
    string event_type = 18;
    string event_code = 19;
    // the id of the aggregate that this event belongs to
    string aggregate_id = 20 [(validate.rules).string.uuid = true];
    // data representing the state of the system that this event encapsulates
    // it is saved as a json string so that the eventstore can be completey agnostic to the
    // the data structure of the system (and thus be a static service)
    // this data MUST be able to be unmarshalled into a Proto message type
    string event_data = 21 [(gorm.field).tag = {type: "json"}];
}
