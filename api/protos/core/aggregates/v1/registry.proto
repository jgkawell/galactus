syntax = "proto3";

package core.aggregates.v1;

import "google/protobuf/timestamp.proto";
import "options/gorm.proto";
import "validate/validate.proto";

option go_package = "github.com/jgkawell/galactus/api/gen/go/core/aggregates/v1";

message Registration {  
    option (gorm.opts).ormable = true;

    // the table primary key
    string id = 1 [(validate.rules).string.uuid = true, (gorm.field).tag = {type: "uuid" primary_key: true}];

    // NOTE: name + version + domain must be unique
    // the service domain
    string domain = 2 [(validate.rules).string = {min_len: 1, max_len: 255}, (gorm.field).tag = {unique_index: "idx"}];
    // the service name
    string name = 3 [(validate.rules).string = {min_len: 1, max_len: 255}, (gorm.field).tag = {unique_index: "idx"}];
    // the service version
    string version = 4 [(validate.rules).string = {min_len: 1, max_len: 255}, (gorm.field).tag = {unique_index: "idx"}];
    // plain text description of the service
    string description = 5 [(validate.rules).string = {min_len: 1, max_len: 255}];
    // the service' current status
    ServiceStatus status = 6 [(validate.rules).enum.defined_only = true];

    // 1-15 reserved for attributes

    // the routes this service exposes
    repeated Route routes = 16 [(gorm.field).has_many = {}];
    // the consumer configuration of the service
    repeated Consumer consumers = 17 [(gorm.field).many_to_many = {}];

    // 16-32 reserved for relations
}

// deregister vs unregister reference: https://grammarhow.com/unregister-vs-deregister/
enum ServiceStatus {
    SERVICE_STATUS_UNSPECIFIED = 0;
    SERVICE_STATUS_REGISTERED = 1;
    SERVICE_STATUS_DEREGISTERED = 2;
    SERVICE_STATUS_HEALTHY = 3;
    SERVICE_STATUS_UNHEALTHY = 4;
}

message Route {
    option (gorm.opts).ormable = true;
  
    // the table primary key
    string id = 1 [(validate.rules).string.uuid = true, (gorm.field).tag = {type: "uuid" primary_key: true}];

    // NOTE: the route path must be unique
    // the route path (e.g. '/core.commandhandler.v1.CommandHandler' (grpc) or '/core/eventstore/v1' (http))
    string path = 2 [(validate.rules).string = {min_len: 1, max_len: 255}, (gorm.field).tag = {unique_index: "idx"}];
    // the host of the route (e.g. 'localhost' or the name of the service in Istio)
    string host = 3 [(validate.rules).string = {min_len: 1, max_len: 255}];
    // the route port (e.g. 8080 or 8090)
    int32 port = 4 [(validate.rules).int32 = {gt: 1, lt: 65535}];

    ProtocolKind kind = 5 [(validate.rules).enum.defined_only = true];
}

enum ProtocolKind {
    PROTOCOL_KIND_UNSPECIFIED = 0;
    PROTOCOL_KIND_GRPC = 1;
    PROTOCOL_KIND_HTTP = 2;
}

message Consumer {
    option (gorm.opts).ormable = true;
  
    // the table primary key
    string id = 1 [(validate.rules).string.uuid = true, (gorm.field).tag = {type: "uuid" primary_key: true}];

    // NOTE: the aggregate_type + event_type + event_code must be unique
    string aggregate_type = 2 [(validate.rules).string = {min_len: 1, max_len: 255}, (gorm.field).tag = {unique_index: "idx"}];
    string event_type = 3 [(validate.rules).string = {min_len: 1, max_len: 255}, (gorm.field).tag = {unique_index: "idx"}];
    string event_code = 4 [(validate.rules).string = {min_len: 1, max_len: 255}, (gorm.field).tag = {unique_index: "idx"}];

    ConsumerKind kind = 5 [(validate.rules).enum.defined_only = true];
}

// consumer kind is whether the consumer is a queue (unicast - 1:N queue to consumer) or topic (multicast - 1:1 queue to consumer)
enum ConsumerKind {
    CONSUMER_KIND_UNSPECIFIED = 0;
    CONSUMER_KIND_QUEUE = 1;
    CONSUMER_KIND_TOPIC = 2;
}
