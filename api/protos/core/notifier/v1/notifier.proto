
syntax = "proto3";

package core.notifier.v1;

option go_package = "github.com/circadence-official/galactus/api/gen/go/core/notifier/v1";

// `Connect` - A rpc method that can push a notification to a connected `web-client`.
// A map of `session_id`'s and `user_id`'s is maintained to know how a notification
// should be sent. Using this interface requires that the web-client has issued
// a `StartUserSession` command against the `CommandHandler`
//
// For a connection to be established with the `notification` service, the users `session_id` and `user_id` are required 
//
// Given these two values the service is required to maintain a mapping between events, channels, and
// users. This will allow the service to push messages to the correct clients.
//
// `ConnectInternal` - Maintains a map of all `MinionD` connections so it can receive a notification, and push
// `MinionD` specific messages
service Notifier {
  // Connect a web-client
  rpc Connect(ConnectionRequest) returns (stream Notification) {}
}

// ConnectionRequest - is used for a client, to connect and receive `Notifications` from processed events in the system.
message ConnectionRequest {
  string actor_id = 1;
  // `client_id` is generated by the client and if not present the request will be denied.
  string client_id = 2;
}

// A notification send to the web client
message Notification {
  // notification type is the name of the type that is sent in the data value. This is recommended
  // given the `web-client` may want to check the message type and perform specific actions.
  NotificationType notification_type = 1;

  // Data for each notification will be a message found in this package that
  // is json encoded as a struct type. This main advantage to this is we will not need to
  // redeploy the server, and client when a new notification is added, the `struct` type
  // in javascript is an object
  string data = 2;

  // UUID providing traceability all the way through the system to client
  string transaction_id = 3;
}

// NotificationType - A code that communicates to a integrated client the message type that is being sent.
// TODO: check to see if you can add to this enum without having to redeploy the notifier service
enum NotificationType {
  INVALID = 0;
  HEARTBEAT = 1;
  TODO_CREATED = 2;
}

// Heartbeat - A message sent on a consistent time interval maintaining the users session, and expiration deadline.
message Heartbeat {
  // users current session id
  string session_id = 1;

  // Time when the `UsersSession` will expire if another `Heartbeat` is not sent before.
  int64 expiration_deadline = 2;

  // client id
  string client_id = 3;
}
