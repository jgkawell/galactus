
syntax = "proto3";

package core.registry.v1;

option go_package = "github.com/jgkawell/galactus/api/gen/go/core/registry/v1";

import "core/aggregates/v1/registry.proto";

service Registry {
  // Register registers a new microservice with the registry.
  rpc Register(RegisterRequest) returns (RegisterResponse) {}
  // Deregister deregisters a microservice from the registry.
  // rpc Deregister(DeregisterRequest) returns (DeregisterResponse) {}

  // Connection returns the connection info for a microservice.
  // Example: Service A wishes to call Service B, A calls registry.Connection(B)
  //          which returns the connection info for B. If B is not available or
  //          not registered, an error will be returned.
  rpc Connection(ConnectionRequest) returns (ConnectionResponse) {}
  // TODO: this will be ingested by the local proxy at bootup
  // Connections returns the connection info for all microservices.
  // rpc Connections(ConnectionsRequest) returns (ConnectionsResponse) {}
}

// REGISTER

message RegisterRequest {
  string name = 1;
  string domain = 2; // this needs to match the k8s namespace for remote deployments
  // address = domain.name:port
  string version = 3; // should be semver
  string description = 4;

  repeated ProtocolRequest protocols = 5;
  repeated ConsumerRequest consumers = 6;
}

message ProtocolRequest {
  int32 order = 1;
  core.aggregates.v1.ProtocolKind kind = 2;
  string route = 3;
}

message ConsumerRequest {
  int32 order = 1;
  core.aggregates.v1.ConsumerKind kind = 2;
  string aggregate_type = 3;
  string event_type = 4;
  string event_code = 5;
}

message RegisterResponse {
  repeated ProtocolResponse protocols = 1;
  repeated ConsumerResponse consumers = 2;
}

message ProtocolResponse {
  int32 order = 1;
  core.aggregates.v1.ProtocolKind kind = 2;
  int32 port = 3;
}

message ConsumerResponse {
  int32 order = 1;
  core.aggregates.v1.ConsumerKind kind = 2;
  string routing_key = 3;
  string exchange = 4;
  string queue_name = 5;
}

// CONNECTION

message ConnectionRequest {
  string name = 1;
  // this is the major version of the service to connect to (v1, v2, etc.)
  string version = 2;
  core.aggregates.v1.ProtocolKind type = 3;
}

message ConnectionResponse {
  string address = 1;
  int32 port = 2;
  ServiceStatus status = 3;
}

enum ServiceStatus {
  SERVICE_STATUS_INVALID = 0;
  SERVICE_STATUS_HEALTHY = 1;
  SERVICE_STATUS_UNHEALTHY = 2;
}
