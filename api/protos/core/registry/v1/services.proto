syntax = "proto3";

package core.registry.v1;

import "core/registry/v1/models.proto";
import "validate/validate.proto";

option go_package = "github.com/jgkawell/galactus/api/gen/go/core/registry/v1";

service Registry {
    // Register registers a microservice with the registry
    rpc Register(RegisterRequest) returns (RegisterResponse) {}

    // Deregister deregisters a microservice from the registry.
    // rpc Deregister(DeregisterRequest) returns (DeregisterResponse) {}


    rpc RegisterGrpcServer(RegisterGrpcServerRequest) returns (RegisterGrpcServerResponse) {}

    rpc RegisterHttpServer(RegisterHttpServerRequest) returns (RegisterHttpServerResponse) {}

    rpc RegisterConsumers(RegisterConsumersRequest) returns (RegisterConsumersResponse) {}

    // Connection returns the connection info for a microservice.
    // Example: Service A wishes to call Service B, A calls registry.Connection(B)
    //          which returns the connection info for B. If B is not available or
    //          not registered, an error will be returned.
    rpc Connection(ConnectionRequest) returns (ConnectionResponse) {}
    // TODO: this will be ingested by the local proxy at bootup
    // Connections returns the connection info for all microservices.
    // rpc Connections(ConnectionsRequest) returns (ConnectionsResponse) {}
}

// REGISTER

message RegisterRequest {
    // name is the name of the microservice
    string name = 1;
    // domain is the domain of the microservice
    string domain = 2;
    // version is the version of the microservice (must take the form: vMAJOR.MINOR.PATCH)
    string version = 3 [(validate.rules).string.pattern = "^v[0-9]+\\.[0-9]+\\.[0-9]+$"];
}
message RegisterResponse {
    string id = 1 [(validate.rules).string.uuid = true];
}

message RegisterGrpcServerRequest {
    string id = 1 [(validate.rules).string.uuid = true];
    string route = 2;
}
message RegisterGrpcServerResponse {
    string port = 1;
}

message RegisterHttpServerRequest {
    string id = 1 [(validate.rules).string.uuid = true];
    string route = 2;
}
message RegisterHttpServerResponse {
    string port = 1;
}

message RegisterConsumersRequest {
    string id = 1 [(validate.rules).string.uuid = true];
    repeated ConsumerRequest consumers = 2;
}
message ConsumerRequest {
    // kind is the type of consumer (one or all)
    core.registry.v1.ConsumerKind kind = 1  [(validate.rules).enum.defined_only = true];
    // event_source is the source of events the consumer is listening for
    string event_source = 2;
    // event_type is the type of event the consumer is listening for: when empty, the consumer is listening for all events
    // of the given event_source
    optional string event_type = 3;
}
message RegisterConsumersResponse {}

// CONNECTION

message ConnectionRequest {
    string route = 1;
}

message ConnectionResponse {
    string address = 1;
    Status status = 3;
}

enum Status {
    STATUS_INVALID_UNSPECIFIED = 0;
    STATUS_HEALTHY = 1;
    STATUS_UNHEALTHY = 2;
}
