// Package handler contains the API entrypoints for the {{.GetLower}} service.
package handler

import (
	"context"

	s "{{.GetLower}}/service"

	es "github.com/jgkawell/galactus/api/gen/go/core/eventstore/v1"

	l "github.com/jgkawell/galactus/pkg/logging/v2"
	mb "github.com/jgkawell/galactus/pkg/messagebus/v2"
	ut "github.com/jgkawell/galactus/pkg/chassis/util"
)

type consumer struct {
	logger  l.Logger
	service s.Service
}

// NewConsumer is the constructor for the messagebus consumer
// NOTE: it owns a copy of the logger from main.go and passes it (with fields) to the service layer through the ExecutionContext
func NewConsumer(logger l.Logger, service s.Service) mb.ClientMessageHandler {
	return &consumer{
		logger, service,
	}
}

var (
	// generic errors for event/message parsing
	ErrorFailedMessageData = "failed to get message data from queued message"
	ErrorFailedUnmarshal   = "failed to unmarshal request"
	ErrorMsgNotProcessed   = "messages not processed"

	// session specific errors
	IncomingQueuedMessage = "handler_incoming_queued_message"

	// TODO: Add {{.GetTitle}} specific errors
)

// Handle is the callback function that is called by the messagebus package when a message arrives on a queue/topic
func (c *consumer) Handle(ctx context.Context, msg mb.QueuedMessage) error {
	// include the message in all subsequent logs
	logger := c.logger.WithField(IncomingQueuedMessage, msg)

	// build execution context, with event that contains a transaction id
	execCtx, err := ut.NewExecutionContextFromEvent(ctx, logger)
	if err != nil {
		logger.WithError(err).Error("failed to create execution context from event")
		return nil
	}

	// extract message data and body from queued message into event type and body
	evt, data, err := ut.GetEventAndMessageData(ctx, logger, msg)
	if err != nil {
		logger.WithError(err).Error(ErrorFailedMessageData)
		return nil
	}

	switch evt.GetEventType().Get{{.GetAggregateTitle}}EventCode() {
	case es.{{.GetAggregateTitle}}EventCode_{{.GetCommandUpper}}_REQUESTED:
		c.service.{{.GetCommandTitle}}Command(execCtx, data)
		logger.Debug("{{.GetTitle}}Command completed")
	// TODO: Add more event types here as needed
	// don't do anything (other than log) for unhandled and invalid events as nothing has broken in the service, but we still need to see a log about the anomaly
    case es.{{.GetAggregateTitle}}EventCode_INVALID_{{.GetAggregateUpper}}_EVENT_CODE:
		logger.Warn("invalid event code")
        fallthrough
    default:
		logger.Error("unhandled event code")
        msg.Reject()
	}

	return nil
}
