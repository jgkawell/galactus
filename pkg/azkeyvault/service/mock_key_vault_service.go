// Code generated by mockery v2.9.4. DO NOT EDIT.

package service

import (
	context "context"

	logging "github.com/jgkawell/galactus/pkg/logging"
	mock "github.com/stretchr/testify/mock"

	model "github.com/jgkawell/galactus/pkg/azkeyvault/model"
)

// MockKeyVaultService is an autogenerated mock type for the KeyVaultService type
type MockKeyVaultService struct {
	mock.Mock
}

// DeleteSecret provides a mock function with given fields: ctx, logger, resourceGroup, keyVault, key
func (_m *MockKeyVaultService) DeleteSecret(ctx context.Context, logger logging.Logger, resourceGroup string, keyVault string, key string) logging.Error {
	ret := _m.Called(ctx, logger, resourceGroup, keyVault, key)

	var r0 logging.Error
	if rf, ok := ret.Get(0).(func(context.Context, logging.Logger, string, string, string) logging.Error); ok {
		r0 = rf(ctx, logger, resourceGroup, keyVault, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logging.Error)
		}
	}

	return r0
}

// GetSecret provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *MockKeyVaultService) GetSecret(_a0 context.Context, _a1 logging.Logger, _a2 string, _a3 string, _a4 string) (string, logging.Error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, logging.Logger, string, string, string) string); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 logging.Error
	if rf, ok := ret.Get(1).(func(context.Context, logging.Logger, string, string, string) logging.Error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(logging.Error)
		}
	}

	return r0, r1
}

// SetSecret provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4, _a5
func (_m *MockKeyVaultService) SetSecret(_a0 context.Context, _a1 logging.Logger, _a2 string, _a3 string, _a4 string, _a5 string) logging.Error {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4, _a5)

	var r0 logging.Error
	if rf, ok := ret.Get(0).(func(context.Context, logging.Logger, string, string, string, string) logging.Error); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4, _a5)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logging.Error)
		}
	}

	return r0
}

// getVaultURL provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *MockKeyVaultService) getVaultURL(_a0 context.Context, _a1 logging.Logger, _a2 model.AzureAuthConfig, _a3 string, _a4 string) (*string, logging.Error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 *string
	if rf, ok := ret.Get(0).(func(context.Context, logging.Logger, model.AzureAuthConfig, string, string) *string); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	var r1 logging.Error
	if rf, ok := ret.Get(1).(func(context.Context, logging.Logger, model.AzureAuthConfig, string, string) logging.Error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(logging.Error)
		}
	}

	return r0, r1
}
