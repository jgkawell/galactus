// Code generated by mockery v2.9.4. DO NOT EDIT.

package context

import (
	"context"

	logging "github.com/jgkawell/galactus/pkg/logging"
	mock "github.com/stretchr/testify/mock"
)

// MockExecutionContext is an autogenerated mock type for the ExecutionContext type
type MockExecutionContext struct {
	mock.Mock
}

// GetContext provides a mock function with given fields:
func (_m *MockExecutionContext) GetContext() context.Context {
	ret := _m.Called()

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// GetContextWithTransactionID provides a mock function with given fields:
func (_m *MockExecutionContext) GetContextWithTransactionID() (context.Context, error) {
	ret := _m.Called()

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLogger provides a mock function with given fields:
func (_m *MockExecutionContext) GetLogger() logging.Logger {
	ret := _m.Called()

	var r0 logging.Logger
	if rf, ok := ret.Get(0).(func() logging.Logger); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logging.Logger)
		}
	}

	return r0
}

// GetTransactionID provides a mock function with given fields:
func (_m *MockExecutionContext) GetTransactionID() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
