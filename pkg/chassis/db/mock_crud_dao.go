// Code generated by mockery v2.15.0. DO NOT EDIT.

package db

import (
	context "context"

	logging "github.com/jgkawell/galactus/pkg/logging/v2"
	mock "github.com/stretchr/testify/mock"

	mongo "go.mongodb.org/mongo-driver/mongo"

	options "go.mongodb.org/mongo-driver/mongo/options"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockCrudDao is an autogenerated mock type for the CrudDao type
type MockCrudDao struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, logger, model
func (_m *MockCrudDao) Create(ctx context.Context, logger logging.Logger, model interface{}) (string, logging.Error) {
	ret := _m.Called(ctx, logger, model)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, logging.Logger, interface{}) string); ok {
		r0 = rf(ctx, logger, model)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 logging.Error
	if rf, ok := ret.Get(1).(func(context.Context, logging.Logger, interface{}) logging.Error); ok {
		r1 = rf(ctx, logger, model)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(logging.Error)
		}
	}

	return r0, r1
}

// CreateWithId provides a mock function with given fields: ctx, logger, id, model
func (_m *MockCrudDao) CreateWithId(ctx context.Context, logger logging.Logger, id string, model interface{}) (string, logging.Error) {
	ret := _m.Called(ctx, logger, id, model)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, logging.Logger, string, interface{}) string); ok {
		r0 = rf(ctx, logger, id, model)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 logging.Error
	if rf, ok := ret.Get(1).(func(context.Context, logging.Logger, string, interface{}) logging.Error); ok {
		r1 = rf(ctx, logger, id, model)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(logging.Error)
		}
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, logger, params
func (_m *MockCrudDao) Delete(ctx context.Context, logger logging.Logger, params primitive.M) logging.Error {
	ret := _m.Called(ctx, logger, params)

	var r0 logging.Error
	if rf, ok := ret.Get(0).(func(context.Context, logging.Logger, primitive.M) logging.Error); ok {
		r0 = rf(ctx, logger, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logging.Error)
		}
	}

	return r0
}

// DeleteById provides a mock function with given fields: ctx, logger, id
func (_m *MockCrudDao) DeleteById(ctx context.Context, logger logging.Logger, id string) logging.Error {
	ret := _m.Called(ctx, logger, id)

	var r0 logging.Error
	if rf, ok := ret.Get(0).(func(context.Context, logging.Logger, string) logging.Error); ok {
		r0 = rf(ctx, logger, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logging.Error)
		}
	}

	return r0
}

// GenerateBase64URLEncodedId provides a mock function with given fields: logger
func (_m *MockCrudDao) GenerateBase64URLEncodedId(logger logging.Logger) (string, logging.Error) {
	ret := _m.Called(logger)

	var r0 string
	if rf, ok := ret.Get(0).(func(logging.Logger) string); ok {
		r0 = rf(logger)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 logging.Error
	if rf, ok := ret.Get(1).(func(logging.Logger) logging.Error); ok {
		r1 = rf(logger)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(logging.Error)
		}
	}

	return r0, r1
}

// GetCollection provides a mock function with given fields:
func (_m *MockCrudDao) GetCollection() *mongo.Collection {
	ret := _m.Called()

	var r0 *mongo.Collection
	if rf, ok := ret.Get(0).(func() *mongo.Collection); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.Collection)
		}
	}

	return r0
}

// GetConfiguration provides a mock function with given fields:
func (_m *MockCrudDao) GetConfiguration() *CrudDaoConfig {
	ret := _m.Called()

	var r0 *CrudDaoConfig
	if rf, ok := ret.Get(0).(func() *CrudDaoConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CrudDaoConfig)
		}
	}

	return r0
}

// InitializeCompositeUniqueIndex provides a mock function with given fields: logger, keys
func (_m *MockCrudDao) InitializeCompositeUniqueIndex(logger logging.Logger, keys primitive.D) logging.Error {
	ret := _m.Called(logger, keys)

	var r0 logging.Error
	if rf, ok := ret.Get(0).(func(logging.Logger, primitive.D) logging.Error); ok {
		r0 = rf(logger, keys)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logging.Error)
		}
	}

	return r0
}

// Read provides a mock function with given fields: ctx, logger, params, decodeModelCallback, opts
func (_m *MockCrudDao) Read(ctx context.Context, logger logging.Logger, params primitive.M, decodeModelCallback func([]byte, string) (interface{}, error), opts ...*options.FindOptions) ([]CrudDaoModel, logging.Error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, logger, params, decodeModelCallback)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []CrudDaoModel
	if rf, ok := ret.Get(0).(func(context.Context, logging.Logger, primitive.M, func([]byte, string) (interface{}, error), ...*options.FindOptions) []CrudDaoModel); ok {
		r0 = rf(ctx, logger, params, decodeModelCallback, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]CrudDaoModel)
		}
	}

	var r1 logging.Error
	if rf, ok := ret.Get(1).(func(context.Context, logging.Logger, primitive.M, func([]byte, string) (interface{}, error), ...*options.FindOptions) logging.Error); ok {
		r1 = rf(ctx, logger, params, decodeModelCallback, opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(logging.Error)
		}
	}

	return r0, r1
}

// ReadById provides a mock function with given fields: ctx, logger, id, decodeModelCallback, opts
func (_m *MockCrudDao) ReadById(ctx context.Context, logger logging.Logger, id string, decodeModelCallback func([]byte, string) (interface{}, error), opts ...*options.FindOptions) (CrudDaoModel, bool, logging.Error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, logger, id, decodeModelCallback)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 CrudDaoModel
	if rf, ok := ret.Get(0).(func(context.Context, logging.Logger, string, func([]byte, string) (interface{}, error), ...*options.FindOptions) CrudDaoModel); ok {
		r0 = rf(ctx, logger, id, decodeModelCallback, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(CrudDaoModel)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(context.Context, logging.Logger, string, func([]byte, string) (interface{}, error), ...*options.FindOptions) bool); ok {
		r1 = rf(ctx, logger, id, decodeModelCallback, opts...)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 logging.Error
	if rf, ok := ret.Get(2).(func(context.Context, logging.Logger, string, func([]byte, string) (interface{}, error), ...*options.FindOptions) logging.Error); ok {
		r2 = rf(ctx, logger, id, decodeModelCallback, opts...)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(logging.Error)
		}
	}

	return r0, r1, r2
}

// SetRequiredParams provides a mock function with given fields: params
func (_m *MockCrudDao) SetRequiredParams(params primitive.M) {
	_m.Called(params)
}

// Update provides a mock function with given fields: ctx, logger, params, model
func (_m *MockCrudDao) Update(ctx context.Context, logger logging.Logger, params primitive.M, model interface{}) logging.Error {
	ret := _m.Called(ctx, logger, params, model)

	var r0 logging.Error
	if rf, ok := ret.Get(0).(func(context.Context, logging.Logger, primitive.M, interface{}) logging.Error); ok {
		r0 = rf(ctx, logger, params, model)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logging.Error)
		}
	}

	return r0
}

// UpdateById provides a mock function with given fields: ctx, logger, id, model
func (_m *MockCrudDao) UpdateById(ctx context.Context, logger logging.Logger, id string, model interface{}) logging.Error {
	ret := _m.Called(ctx, logger, id, model)

	var r0 logging.Error
	if rf, ok := ret.Get(0).(func(context.Context, logging.Logger, string, interface{}) logging.Error); ok {
		r0 = rf(ctx, logger, id, model)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logging.Error)
		}
	}

	return r0
}

type mockConstructorTestingTNewMockCrudDao interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockCrudDao creates a new instance of MockCrudDao. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockCrudDao(t mockConstructorTestingTNewMockCrudDao) *MockCrudDao {
	mock := &MockCrudDao{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
