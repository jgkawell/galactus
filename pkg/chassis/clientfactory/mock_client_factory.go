// Code generated by mockery v2.9.4. DO NOT EDIT.

package clientfactory

import (
	eventstorev1 "github.com/jgkawell/galactus/api/gen/go/core/eventstore/v1"
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	v1 "github.com/jgkawell/galactus/api/gen/go/core/commandhandler/v1"
)

// MockClientFactory is an autogenerated mock type for the ClientFactory type
type MockClientFactory struct {
	mock.Mock
}

// CloseConnection provides a mock function with given fields: connection
func (_m *MockClientFactory) CloseConnection(connection *grpc.ClientConn) {
	_m.Called(connection)
}

// CreateCommandHandlerClient provides a mock function with given fields: url
func (_m *MockClientFactory) CreateCommandHandlerClient(url string) (v1.CommandHandlerClient, *grpc.ClientConn, error) {
	ret := _m.Called(url)

	var r0 v1.CommandHandlerClient
	if rf, ok := ret.Get(0).(func(string) v1.CommandHandlerClient); ok {
		r0 = rf(url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.CommandHandlerClient)
		}
	}

	var r1 *grpc.ClientConn
	if rf, ok := ret.Get(1).(func(string) *grpc.ClientConn); ok {
		r1 = rf(url)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*grpc.ClientConn)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(url)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CreateEventStoreClient provides a mock function with given fields: url
func (_m *MockClientFactory) CreateEventStoreClient(url string) (eventstorev1.EventStoreClient, *grpc.ClientConn, error) {
	ret := _m.Called(url)

	var r0 eventstorev1.EventStoreClient
	if rf, ok := ret.Get(0).(func(string) eventstorev1.EventStoreClient); ok {
		r0 = rf(url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(eventstorev1.EventStoreClient)
		}
	}

	var r1 *grpc.ClientConn
	if rf, ok := ret.Get(1).(func(string) *grpc.ClientConn); ok {
		r1 = rf(url)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*grpc.ClientConn)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(url)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
