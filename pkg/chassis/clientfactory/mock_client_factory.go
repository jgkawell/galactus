// Code generated by mockery v2.15.0. DO NOT EDIT.

package clientfactory

import (
	eventstorev1 "github.com/jgkawell/galactus/api/gen/go/core/eventstore/v1"
	grpc "google.golang.org/grpc"

	logging "github.com/jgkawell/galactus/pkg/logging"

	mock "github.com/stretchr/testify/mock"

	registryv1 "github.com/jgkawell/galactus/api/gen/go/core/registry/v1"

	v1 "github.com/jgkawell/galactus/api/gen/go/core/commandhandler/v1"
)

// MockClientFactory is an autogenerated mock type for the ClientFactory type
type MockClientFactory struct {
	mock.Mock
}

// CloseConnection provides a mock function with given fields: logger, connection
func (_m *MockClientFactory) CloseConnection(logger logging.Logger, connection *grpc.ClientConn) {
	_m.Called(logger, connection)
}

// CreateCommandHandlerClient provides a mock function with given fields: logger, url
func (_m *MockClientFactory) CreateCommandHandlerClient(logger logging.Logger, url string) (v1.CommandHandlerClient, *grpc.ClientConn, error) {
	ret := _m.Called(logger, url)

	var r0 v1.CommandHandlerClient
	if rf, ok := ret.Get(0).(func(logging.Logger, string) v1.CommandHandlerClient); ok {
		r0 = rf(logger, url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.CommandHandlerClient)
		}
	}

	var r1 *grpc.ClientConn
	if rf, ok := ret.Get(1).(func(logging.Logger, string) *grpc.ClientConn); ok {
		r1 = rf(logger, url)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*grpc.ClientConn)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(logging.Logger, string) error); ok {
		r2 = rf(logger, url)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CreateEventStoreClient provides a mock function with given fields: logger, url
func (_m *MockClientFactory) CreateEventStoreClient(logger logging.Logger, url string) (eventstorev1.EventStoreClient, *grpc.ClientConn, error) {
	ret := _m.Called(logger, url)

	var r0 eventstorev1.EventStoreClient
	if rf, ok := ret.Get(0).(func(logging.Logger, string) eventstorev1.EventStoreClient); ok {
		r0 = rf(logger, url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(eventstorev1.EventStoreClient)
		}
	}

	var r1 *grpc.ClientConn
	if rf, ok := ret.Get(1).(func(logging.Logger, string) *grpc.ClientConn); ok {
		r1 = rf(logger, url)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*grpc.ClientConn)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(logging.Logger, string) error); ok {
		r2 = rf(logger, url)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CreateRegistryClient provides a mock function with given fields: logger, url
func (_m *MockClientFactory) CreateRegistryClient(logger logging.Logger, url string) (registryv1.RegistryClient, *grpc.ClientConn, error) {
	ret := _m.Called(logger, url)

	var r0 registryv1.RegistryClient
	if rf, ok := ret.Get(0).(func(logging.Logger, string) registryv1.RegistryClient); ok {
		r0 = rf(logger, url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(registryv1.RegistryClient)
		}
	}

	var r1 *grpc.ClientConn
	if rf, ok := ret.Get(1).(func(logging.Logger, string) *grpc.ClientConn); ok {
		r1 = rf(logger, url)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*grpc.ClientConn)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(logging.Logger, string) error); ok {
		r2 = rf(logger, url)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewMockClientFactory interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockClientFactory creates a new instance of MockClientFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockClientFactory(t mockConstructorTestingTNewMockClientFactory) *MockClientFactory {
	mock := &MockClientFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
