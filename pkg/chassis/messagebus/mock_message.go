// Code generated by mockery v2.15.0. DO NOT EDIT.

package messagebus

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockMessage is an autogenerated mock type for the Message type
type MockMessage struct {
	mock.Mock
}

// Complete provides a mock function with given fields:
func (_m *MockMessage) Complete() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCustomHeader provides a mock function with given fields: name
func (_m *MockMessage) GetCustomHeader(name string) (string, bool) {
	ret := _m.Called(name)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetMessage provides a mock function with given fields: target
func (_m *MockMessage) GetMessage(target interface{}) error {
	ret := _m.Called(target)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(target)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MessageID provides a mock function with given fields:
func (_m *MockMessage) MessageID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MessageType provides a mock function with given fields:
func (_m *MockMessage) MessageType() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Reject provides a mock function with given fields:
func (_m *MockMessage) Reject() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Retry provides a mock function with given fields:
func (_m *MockMessage) Retry() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RetryAfter provides a mock function with given fields: seconds
func (_m *MockMessage) RetryAfter(seconds int) error {
	ret := _m.Called(seconds)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(seconds)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Timestamp provides a mock function with given fields:
func (_m *MockMessage) Timestamp() time.Time {
	ret := _m.Called()

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

type mockConstructorTestingTNewMockMessage interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockMessage creates a new instance of MockMessage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockMessage(t mockConstructorTestingTNewMockMessage) *MockMessage {
	mock := &MockMessage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
